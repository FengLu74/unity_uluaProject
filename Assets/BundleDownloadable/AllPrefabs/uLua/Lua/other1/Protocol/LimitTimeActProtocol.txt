module("LimitTimeActProtocol", package.seeall)

-------------------------------------------------------处理接收协议 START-------------------------------------------------------

function RegisterProtocols()
    -- 通知限时排行是否开启
    network.Register(GMI_STOC_LIMIT_RANK_OPENINFO, RankOpenInfoReturn);
    -- 战斗力提升榜
    network.Register(GMI_STOC_LIMIT_RANK_FIGHT_RISE, RankFightPowerReturn);
    -- 宠物战斗力榜
    network.Register(GMI_STOC_LIMIT_RANK_PETFIGHTABILITY, RankPetReturn);
    -- 公会战斗力榜
    network.Register(GMI_STOC_LIMIT_RANK_GANG_XIGUAN, RankGuildPowerReturn);
    -- 公会捐献榜
    network.Register(GMI_STOC_LIMIT_RANK_CORPS_ADDMONEY, RankGuildDonationReturn);
    -- 阵营杀敌榜
    network.Register(GMI_STOC_LIMIT_RANK_UNION_SD, RankCampKillReturn);

    -- 各排行榜信息
    network.Register(GMI_STOC_LIMITRANK_DATA_ACK, RankDataReturn);

end

-- 限时排行是否开启消息返回
function RankOpenInfoReturn(protocolId, buffer)
    --error("限时排行是否开启消息返回");
    local count = buffer:ReadInt();        -- 排行榜数据数量
    for i = 1 ,count do 
        local rankType = buffer:ReadByte();    -- 排行榜类型
        local rankSubType = buffer:ReadByte(); -- 排行榜子类型
        local isOpen = buffer:ReadUShort();    -- 是否开启(1:开启 0：关闭)
        local temp = { };
        temp.rankType = rankType;
        temp.rankSubType = rankSubType;
        if isOpen == 1 then 
            if LimitTimeActMng.RankOpenInfoData == nil then LimitTimeActMng.RankOpenInfoData = {}; end
            table.insert(LimitTimeActMng.RankOpenInfoData, temp);
        end
    end
    if LimitTimeActMng.RankOpenInfoData ~= nil then 
        table.sort(LimitTimeActMng.RankOpenInfoData, function(a, b) return a.rankType < b.rankType end);
    end
    --print("RankOpenInfoData = ",SerializeTable(LimitTimeActMng.RankOpenInfoData));
end

-- 战斗力提升榜
function RankFightPowerReturn(protocolId, buffer)
    local rankIndex = buffer:ReadUInt();        -- 自己的排行榜排名 
    local rankType = buffer:ReadByte();         -- 排行榜类型
    local rankSubType = buffer:ReadByte();      -- 排行榜子类型
    local fightPowerValue = buffer:ReadInt();   -- 战斗力提升值
    local time = buffer:ReadInt64();            -- 活动剩余时间

    if LimitTimeActMng.RankFightPower == nil then LimitTimeActMng.RankFightPower = {}; end
    LimitTimeActMng.RankFightPower.rankIndex = rankIndex;
    LimitTimeActMng.RankFightPower.rankType = rankType;
    LimitTimeActMng.RankFightPower.rankSubType = rankSubType;
    LimitTimeActMng.RankFightPower.fightPowerValue = fightPowerValue;
    LimitTimeActMng.RankFightPower.time = time;

    --print("RankFightPower = ",SerializeTable(LimitTimeActMng.RankFightPower));
    LimitTimeActPanel.OpenRankPanel();
end

-- 宠物战斗力榜
function RankPetReturn(protocolId, buffer)
    local rankIndex = buffer:ReadUInt();        -- 自己的排行榜排名 
    local rankType = buffer:ReadByte();         -- 排行榜类型
    local rankSubType = buffer:ReadByte();      -- 排行榜子类型
    local maxPetValue = buffer:ReadInt();       -- 最高宠物战斗力
    local maxPetLevel = buffer:ReadInt();       -- 最高宠物等级
    local maxPetExcelID = buffer:ReadInt();     -- 最高宠物ExcelID
    local time = buffer:ReadInt64();            -- 活动剩余时间

    if LimitTimeActMng.RankPet == nil then LimitTimeActMng.RankPet = {}; end
    LimitTimeActMng.RankPet.rankIndex = rankIndex;
    LimitTimeActMng.RankPet.rankType = rankType;
    LimitTimeActMng.RankPet.rankSubType = rankSubType;
    LimitTimeActMng.RankPet.maxPetValue = maxPetValue;
    LimitTimeActMng.RankPet.maxPetLevel = maxPetLevel;
    LimitTimeActMng.RankPet.maxPetExcelID = maxPetExcelID;
    LimitTimeActMng.RankPet.time = time;
    --print("RankPet = ",SerializeTable(LimitTimeActMng.RankPet));
    LimitTimeActPanel.OpenRankPanel();
end

-- 公会战斗力榜
function RankGuildPowerReturn(protocolId, buffer)
    local rankIndex = buffer:ReadUInt();        -- 自己的排行榜排名 
    local rankType = buffer:ReadByte();         -- 排行榜类型
    local rankSubType = buffer:ReadByte();      -- 排行榜子类型
    local guildValue = buffer:ReadInt64();      -- 公会战力
    local campID = buffer:ReadInt();            -- 阵营id
    local leaderName = buffer:ReadStringByByte();     -- 帮主名称
    local guildName = buffer:ReadStringByByte();      -- 帮会名称
    local guildFlagName = buffer:ReadStringByByte();    -- 帮会图标
    local guildLv = buffer:ReadUShort();        -- 帮会等级
    local time = buffer:ReadInt64();            -- 活动剩余时间

    if LimitTimeActMng.RankGuildPower == nil then LimitTimeActMng.RankGuildPower = {}; end
    LimitTimeActMng.RankGuildPower.rankIndex = rankIndex;
    LimitTimeActMng.RankGuildPower.rankType = rankType;
    LimitTimeActMng.RankGuildPower.rankSubType = rankSubType;
    LimitTimeActMng.RankGuildPower.guildValue = guildValue;
    LimitTimeActMng.RankGuildPower.campID = campID;
    LimitTimeActMng.RankGuildPower.leaderName = leaderName;
    LimitTimeActMng.RankGuildPower.guildName = guildName;
    LimitTimeActMng.RankGuildPower.guildFlagName = guildFlagName;
    LimitTimeActMng.RankGuildPower.guildLv = guildLv;
    LimitTimeActMng.RankGuildPower.time = time;

    LimitTimeActPanel.OpenRankPanel();
end

-- 公会捐献榜
function RankGuildDonationReturn(protocolId, buffer)
    local rankIndex = buffer:ReadUInt();        -- 自己的排行榜排名 
    local rankType = buffer:ReadByte();         -- 排行榜类型
    local rankSubType = buffer:ReadByte();      -- 排行榜子类型
    local guildGoldValue = buffer:ReadInt64();  -- 公会累计捐献资金
    local campID = buffer:ReadInt();            -- 阵营id
    local leaderName = buffer:ReadStringByByte();     -- 帮主名称
    local guildName = buffer:ReadStringByByte();      -- 帮会名称
    local guildFlagName = buffer:ReadStringByByte();    -- 帮会图标
    local guildLv = buffer:ReadUShort();        -- 帮会等级
    local time = buffer:ReadInt64();            -- 活动剩余时间

    if LimitTimeActMng.RankGuildDonation == nil then LimitTimeActMng.RankGuildDonation = {}; end
    LimitTimeActMng.RankGuildDonation.rankIndex = rankIndex;
    LimitTimeActMng.RankGuildDonation.rankType = rankType;
    LimitTimeActMng.RankGuildDonation.rankSubType = rankSubType;
    LimitTimeActMng.RankGuildDonation.guildGoldValue = guildGoldValue;
    LimitTimeActMng.RankGuildDonation.campID = campID;
    LimitTimeActMng.RankGuildDonation.leaderName = leaderName;
    LimitTimeActMng.RankGuildDonation.guildName = guildName;
    LimitTimeActMng.RankGuildDonation.guildFlagName = guildFlagName;
    LimitTimeActMng.RankGuildDonation.guildLv = guildLv;
    LimitTimeActMng.RankGuildDonation.time = time;

    LimitTimeActPanel.OpenRankPanel();
end

-- 阵营杀敌榜
function RankCampKillReturn(protocolId, buffer)
    local rankIndex = buffer:ReadUInt();        -- 自己的排行榜排名 
    local rankType = buffer:ReadByte();         -- 排行榜类型
    local rankSubType = buffer:ReadByte();      -- 排行榜子类型
    local campKillValue = buffer:ReadInt();     -- 阵营累计击杀
    local campID = buffer:ReadInt();            -- 阵营id
    local union = buffer:ReadUInt();            -- 联盟比例
    local tribe = buffer:ReadUInt();            -- 部落比例
    local time = buffer:ReadInt64();            -- 活动剩余时间

    if LimitTimeActMng.RankCampKill == nil then LimitTimeActMng.RankCampKill = {}; end
    LimitTimeActMng.RankCampKill.rankIndex = rankIndex;
    LimitTimeActMng.RankCampKill.rankType = rankType;
    LimitTimeActMng.RankCampKill.rankSubType = rankSubType;
    LimitTimeActMng.RankCampKill.campKillValue = campKillValue;
    LimitTimeActMng.RankCampKill.campID = campID;
    LimitTimeActMng.RankCampKill.union = union;
    LimitTimeActMng.RankCampKill.tribe = tribe;
    LimitTimeActMng.RankCampKill.time = time;

    LimitTimeActPanel.OpenRankPanel();
end

-- 排行榜消息返回
function RankDataReturn(protocolId, buffer)
    -- error("排行榜消息返回")
    if not LimitTimeActMng.players then
        LimitTimeActMng.players = { };
    end
    LimitTimeActMng.rankPlayerDict = { };
    -- 客户端版本号
    LimitTimeActMng.rankVersion = 0;
    LimitTimeActMng.rankVersion = buffer:ReadUInt();
    -- 排行榜大类型
    local rankType = buffer:ReadInt();
    LimitTimeActMng.rankFirstType = rankType;
    -- 排行榜二级类型
    local rankSubType = buffer:ReadInt();
    LimitTimeActMng.rankSecendType = rankSubType;
    -- 排行榜人数
    local rankCount = buffer:ReadUShort();
    LimitTimeActMng.rankAllNum = rankCount;
    -- 我的排名
    local myRank = buffer:ReadUShort();
    LimitTimeActMng.myRank = myRank;
    -- 排行榜的详细数据
    local count = buffer:ReadInt();
    for i = 1, count do
        local rankInfo = RankInfo(buffer);
        table.insert(LimitTimeActMng.players, rankInfo);
    end
    -- 打开排行榜
    LimitTimeActPanel.OpenRankList(rankType, LimitTimeActMng.players);
end
-- 排行榜详细数据
function RankInfo(buffer)
    local rankInfo = { };
    -- id
    rankInfo.Rank = buffer:ReadUInt()
    --error(" rankInfo.m_Rank:::" .. rankInfo.Rank);
    -- 名字1
    rankInfo.Name1 = buffer:ReadStringByByte();
    -- error("rankInfo.Name1::" .. rankInfo.Name1);
    -- 名字2
    rankInfo.Name2 = buffer:ReadStringByByte();
    -- error("rankInfo.Name2::" .. rankInfo.Name2);
    -- 排行榜数据1
    rankInfo.Value = buffer:ReadInt();
    -- error("rankInfo.Value :::" .. rankInfo.Value);
    -- 排行榜数据2
    rankInfo.Value1 = buffer:ReadInt();
    -- error("rankInfo.Value1:::" .. rankInfo.Value1)
    -- 排行榜数据3
    rankInfo.Value2 = buffer:ReadInt();
    -- error("rankInfo.Value2 :::" .. rankInfo.Value2);
    -- 排行榜数据4
    rankInfo.Value3 = buffer:ReadInt64();
    -- error("rankInfo.m_Value3:::" .. rankInfo.Value3);
    return rankInfo;
end
-------------------------------------------------------处理接收协议 START-------------------------------------------------------


-------------------------------------------------------发送协议 START-------------------------------------------------------
-- 获取限时排行榜自己的排名以及值和其他附带信息
-- @param rankType 排行榜大类型
-- @param rankSubType 排行榜二级类型 暂填0
function RequestMyRankInfo(rankType, rankSubType)
    local buffer = ByteBuffer.New();
    buffer:WriteUShort(GMI_CTOS_LGS_GET_LIMIT_RANKING_SELF);
    buffer:WriteByte(rankType);
    buffer:WriteByte(rankSubType);
    G_NetWorkMng:SendMessage(buffer);
end

-- 请求排行榜数据
-- @param rankType 左侧排行榜类型
-- @param rankSubType 右侧排行榜类型
-- @param lastRankId  最后一个排行榜的ID
-- @param recivedCount  接收的排行榜的个数
-- @param version 版本号
function RequestRankList(rankType, rankSubType, lastRankId, recivedCount, version)
    -- error("rankType:::" .. rankType .. "rankSubType:::" .. rankSubType);
    local buffer = ByteBuffer.New();
    buffer:WriteUShort(GMI_CTOS_LGS_REQ_LIMIT_RANK_DATA);
    buffer:WriteInt(version)
    buffer:WriteByte(rankType);
    buffer:WriteByte(rankSubType);
    buffer:WriteUShort(lastRankId);
    buffer:WriteUShort(recivedCount);
    G_NetWorkMng:SendMessage(buffer);
end

-------------------------------------------------------发送协议 END-------------------------------------------------------