module("TeamManager", package.seeall)

-- 队伍成员最大数量
MAX_MEMBER_COUNT = 4;

--全部目标ID
GOAL_ALL_ID = 100;

--匹配所有职业ID
MATCH_ALL_PRO_ID = 255;

-- 队伍目标数据表字典
goalDict = nil;
-- 目标标签对应的目标列表
tabGoals = nil;
-- 目标标签ID列表
goalTabIds = nil;
-- 副本对应的活动ID
dungeonGoalIdDict = nil;
-- 申请队伍有效时间
applyDuration = 30;

-- 列表刷新CD
listRefreshDuration = 6;

-- 邀请玩家有效时间
inviteDuration = 15;

-- 玩家申请或邀请列表
inviteAndApplyList = {};

-- 队伍队员信息
teamMemberList = {};
-- 组队大厅队伍列表
hallTeamList = {};
-- 附近队伍列表
nearbyTeamList = {};
-- 组队界面是否显示红点
teamPanelShowRedHint = false;
-- 队伍信息
teamData = nil;

-- 申请过的队伍列表 key:teamId value:过期时间
appliedTeamList = nil;

-- 邀请玩家列表 key:globalId value:过期时间
invitePlayerList = nil;

-- 自动匹配队伍
autoMatchTeam = false;
-- 组队大厅目标数据
teamHallGoalData = {goalId=2,diffIndex=1};

-- 匹配超时Timer事件
local m_PromptTimerName = "TeamManager_PromptTimer";
-- 匹配超时时间
local m_PromptTime = 60;
-- 匹配超时时对比的职位信息
local m_CompareProInfos = nil;
-- 匹配超时Timer是否执行
local m_TimerRunning = false;

-- 匹配队伍提示时间
local m_MatchTeamPromptTime = 30;
-- 匹配队伍提示计时数据
local m_MatchTeamTimerData = nil;
-- 匹配队伍喊话延时时间
local m_MatchTeamChatTime = 5;
-- 匹配队伍喊话重复次数
local m_MatchTeamChatRepeatCount = 5;
-- 匹配队伍喊话计时数据
local m_MatchTeamChatTimerData = nil;

-- 初始始化静态数据
function InitInfo()
    goalDict = {};
    tabGoals = {};
    goalTabIds = {};
    dungeonGoalIdDict = {};
    tabGoals[GOAL_ALL_ID] = {};

    local list = CCommonTool.GetAllTeamRoomInfo();
    local count = list.Count;
    for i = 1, count do
        local info = list[i-1];
        local tabId = info.TypeId;
        local isTab = info.Title == 1;

        goalDict[info.Id] = info;
        if not isTab then
            if tabGoals[tabId] == nil then
                tabGoals[tabId] = {};
            end
            table.insert(tabGoals[tabId], info);
            if tabId ~= GOAL_ALL_ID then
                table.insert(tabGoals[GOAL_ALL_ID], info);
            end
        else
            table.insert(goalTabIds, info.Id);
        end
        -- 副本的难度信息
        --if info.TypeDungeon == 2 then
            for j = 1, 3 do
                local dungeonId = info["DungeonId"..j];
                if dungeonId > 0 then
                    dungeonGoalIdDict[dungeonId] = {info=info, diffIndex = j};
                end
            end
        --end
    end

    local defineId = 3007;
    local define = CCommonTool.GetDefineInfo(defineId);
    if define ~= nil then
        listRefreshDuration = define:GetIntContent();
    end

    local defineId = 3566;
    local define = CCommonTool.GetDefineInfo(defineId);
    if define ~= nil then
        applyDuration = define:GetIntContent();
    end

    local defineId = 3565;
    local define = CCommonTool.GetDefineInfo(defineId);
    if define ~= nil then
        inviteDuration = define:GetIntContent();
    end

    local defineId = 3564;
    local define = CCommonTool.GetDefineInfo(defineId);
    if define ~= nil then
        m_PromptTime = define:GetIntContent();
    end

    local defineId = 3567;
    local define = CCommonTool.GetDefineInfo(defineId);
    if define ~= nil then
        m_MatchTeamPromptTime = define:GetIntContent();
    end

    local defineId = 3568;
    local define = CCommonTool.GetDefineInfo(defineId);
    if define ~= nil then
        m_MatchTeamChatTime = define:GetIntContent();
    end

    local defineId = 3569;
    local define = CCommonTool.GetDefineInfo(defineId);
    if define ~= nil then
        m_MatchTeamChatRepeatCount = define:GetIntContent();
    end
end

---------------------------------------------------外部调用接口---------------------------------------------------

-- 刷新申请或者邀请的某一个条目
-- @param member 申请或邀请的成员
function RefreshInviteAndApplyList(member)
    for i, mem in ipairs(inviteAndApplyList) do
        if mem.globalId == member.globalId then
            inviteAndApplyList[i] = member;
            return;
        end
    end
    table.insert(inviteAndApplyList, member);
    if not HasTeam() then
        -- 未入队，这个邀请一定是组队邀请,1代表组队邀请，2代表公会邀请
        Main_RightBottom.AddTipTableData(member, ENUM_MAINPANEL_SHOWTIPTYPE.TEAM_INVITE);
    elseif IsLeader() == true then
        Main_RightBottom.AddTipTableData(member, ENUM_MAINPANEL_SHOWTIPTYPE.TEAM_APPLY);
    end
    RedHintMng.SetRedHintState(CREDHINTENUM.TEAM_APPLY_LIST, HasApplyTeam());
end

-- 移除申请或者邀请的某一个条目
-- @param globalId 玩家ID
function RemoveInviteAndApplyList(globalId)
    local member = nil;
    for i, mem in ipairs(inviteAndApplyList) do
        if mem.globalId == globalId then
            member = mem;
            table.remove(inviteAndApplyList, i);
            break;
        end
    end
    if member ~= nil then
        if not HasTeam() then
            -- 未入队，这个邀请一定是组队邀请,1代表组队邀请，2代表公会邀请
            Main_RightBottom.RemoveTipTableData(member, ENUM_MAINPANEL_SHOWTIPTYPE.TEAM_INVITE);
        else
            Main_RightBottom.RemoveTipTableData(member, ENUM_MAINPANEL_SHOWTIPTYPE.TEAM_APPLY);
        end
    else
        error("当前玩家的邀请和申请列表中不存在globalID为::::" .. globalId .. "的玩家");
    end
    RedHintMng.SetRedHintState(CREDHINTENUM.TEAM_APPLY_LIST, HasApplyTeam());
end

-- 清空申请或邀请列表
function RemoveAllInviteAndApplyList()
    inviteAndApplyList = {};
    Main_RightBottom.RemoveAllTypeInTipTable(ENUM_MAINPANEL_SHOWTIPTYPE.TEAM_INVITE);
    Main_RightBottom.RemoveAllTypeInTipTable(ENUM_MAINPANEL_SHOWTIPTYPE.TEAM_APPLY);
    RedHintMng.SetRedHintState(CREDHINTENUM.TEAM_APPLY_LIST, HasApplyTeam());
end

-- 是否有队伍
function HasTeam()
    return teamData ~= nil;
end

-- 是否为队长
function IsLeader()
    return teamData ~= nil and teamData.leaderId == G_UserInfo.GlobalDBID;
end

-- 添加成员
function AddTeamMember(newMem)
    if newMem == nil then
        error("添加成员数据为空!!");
        return;
    end
    local exist = false;
    for i, mem in ipairs(teamMemberList) do
        mem.leaderId = newMem.leaderId;
        if mem.globalId == newMem.globalId then
            exist = true;
            teamMemberList[i] = newMem;
            error(string_format("组队：添加队员信息时，玩家{0}已经在队伍里了，更新该队员", newMem.globalId));
            break;
        end
    end

    if not exist then
        --这里一定是队员， 创建队伍发送info消息，不是创建队伍发送change和info消息
        newMem.memType = TEAM_MEMBER_TYPE.MEMBER;
        table.insert(teamMemberList, newMem);
        G_TeamMng:AddMember(newMem.globalId);
        SortTeamMembers();
    end

    if newMem.globalId == G_UserInfo.GlobalDBID then
        G_TeamMng.FollowState = newMem.followState;
    end
end

-- 移除队员
-- @param globalId 成员ID
function RemoveTeamMember(globalId)
    local exist = false;
    for i, mem in ipairs(teamMemberList) do
        if mem.globalId == globalId then
            exist = true;
            table.remove(teamMemberList, i);
            G_TeamMng:RemoveMember(globalId);
            CancelSelectTeamMember(globalId);
            break;
        end
    end
    if not exist then
        error("组队：删除队员信息，玩家{0}不在队伍信息中", globalId);
    end
    log("移除队员::"..globalId);
end

-- 更新队员状态
function ChangeTeamMemberState(changeMember)
    local exist = false;
    for i, mem in ipairs(teamMemberList) do
        if mem.globalId == changeMember.globalId then
            exist = true;
            mem.leaderId = changeMember.leaderId;
            if mem.id == mem.leaderId then
                mem.memType = TEAM_MEMBER_TYPE.LEADER;
            else
                mem.memType = TEAM_MEMBER_TYPE.MEMBER;
            end
            mem.faceId = changeMember.faceId;
            mem.proId = changeMember.proId;
            mem.profession = changeMember.profession;
            mem.level = changeMember.level;
            mem.dead = changeMember.dead;
            mem.guildId = changeMember.guildId;
            mem.fightPower = changeMember.fightPower;
            mem.memberCount = changeMember.memberCount;
            mem.campType = changeMember.campType;
            mem.name = changeMember.name;
            mem.offline = changeMember.offline;
            mem.followState = changeMember.followState;
            -- 血量百分比是2.55时不需要更新血条
            if changeMember.hpPercent <= 1 then
                mem.hpPercent = changeMember.hpPercent;
            end
            if mem.offline == 1 then
                CancelSelectTeamMember(mem.id);
            end
            break;
        end
    end

    --然后检查当前是否没有这个队员，如果不存在，那么是出错了
    if not exist then
        error("组队：修改队员信息时，玩家{0}不在队伍信息中", changeMember.globalId);
        table.insert(teamMemberList, changeMember);
        SortTeamMembers();
    end
end

-- 队伍成员排序
function SortTeamMembers()
    table.sort(teamMemberList, function(m1, m2) 
        return m1.memType < m2.memType; 
    end);
end

-- 清除队伍
function ClearTeam()
    teamMemberList = {};
    teamData = nil;
    applyList = {};

    appliedTeamList = nil;
    invitePlayerList = nil;

    Main_MiddleTop.InitTeamFollowingOut();
    G_TeamMng:ClearData();
    Main_RightBottom.RemoveAllTypeInTipTable(ENUM_MAINPANEL_SHOWTIPTYPE.TEAM_INVITE);
    Main_RightBottom.RemoveAllTypeInTipTable(ENUM_MAINPANEL_SHOWTIPTYPE.TEAM_APPLY);
    Main_MiddleBottom.AutoSelectRecordChannel();
end

-- 更新队伍信息
-- @param data 队伍信息
function UpdateTeamData(data)
    teamData = data;
    G_TeamMng.HasTeam = true;
    G_TeamMng.LeaderGlobalId = teamData.leaderId;
    autoMatchTeam = false;
end

-- 获取队伍成员信息
function GetTeamMember(globalId)
    for i, mem in ipairs(teamMemberList) do
        if mem.globalId == globalId then
            return mem;
        end
    end
    --error(string_format("没有找到globalID为{0}的队伍成员!", globalId));
    return nil;
end

-- 判断是否与自己是队友
-- @param globalId 玩家ID
function IsTeammate(globalId)
    if not HasTeam() then
        return false;
    end
    if globalId == G_UserInfo.GlobalDBID then
        return false;
    end
    return GetTeamMember(globalId) ~= nil;
end

-- 获取队伍成员列表
function GetTeamMemberList()
    return teamMemberList;
end

-- 获取队员数量
function GetTeamMemberCount()
    if HasTeam() then
        return #teamMemberList;
    end
    return 0;
end

-- 获取队伍列表(不包含自己);
function GetTeamMembersExceptSelf()
    local list = {};
    if HasTeam() then
        local globalId = G_UserInfo.GlobalDBID;
        for _, mem in ipairs(teamMemberList) do
            if globalId ~= mem.globalId then
                table.insert(list, mem);
            end
        end
    end
    return list;
end

-- 获取队伍数据
function GetTeamData()
    return teamData;
end

-- 玩家的申请或者邀请列表
function GetApplyAndInviteList()
    return inviteAndApplyList;
end

-- 获取队伍目标信息
-- @param goalId 目标ID
function GetTeamGoalInfo(goalId)
    goalId = goalId < 1 and 1 or goalId;
    local info = goalDict[goalId];
    if info == nil then
        error(string_format("team_room表ID:{0}不存在!", goalId));
    end
    return info;
end

-- 通过副本ID获取队伍目标信息和难度索引
-- @param dungeonId 副本ID
-- return info, diffIndex info:队伍目标信息, diffIndex:难度信息
function GetTeamGoalInfoByDungeonId(dungeonId)
    local data = dungeonGoalIdDict[dungeonId];
    if data ~= nil then
        return data.info, data.diffIndex;
    end
    error(string_format("通过副本ID:{0}未找到队伍目标信息!", dungeonId));
    return nil, nil;
end

-- 通过活动ID获取队伍目标信息和难度索引
-- @param activityId 活动ID
-- return info, diffIndex info:队伍目标信息, diffIndex:难度信息
function GetTeamGoalInfoByActivityId(activityId)
    --[[for goalId, info in pairs(goalDict) do
        if info.TypeDungeon == 1 then
            if info.DungeonId1 == activityId then
                return info, 1;
            elseif info.DungeonId2 == activityId then
                return info, 2;
            elseif info.DungeonId3 == activityId then
                return info, 3;
            end
        end
    end
    ]]
    local data = dungeonGoalIdDict[activityId];
    if data ~= nil then
        return data.info, data.diffIndex;
    end
    error(string_format("通过活动ID:{0}未找到队伍目标信息!", dungeonId));
    return nil, nil;
end

-- 获取队伍目标名称
-- @param goalId 目标ID
-- @param diffIndex 难度索引
-- @param containsLevel 是否包含等级文本
function GetTeamGoalName(goalId, diffIndex, containsLevel)
    local info = GetTeamGoalInfo(goalId);
    if info ~= nil then
        local diffName = "";
        if info.DiffVisible == 1 then
            if diffIndex == 3 then
                diffName = "-" .. CCommonTool.GetTxtData(930).m_str;  --[[4699FF]困难[-]]
            elseif diffIndex == 2 then
                diffName = "-" .. CCommonTool.GetTxtData(929).m_str;  --[[A6FF75]普通[-]]
            else
                diffName = "-" .. CCommonTool.GetTxtData(928).m_str;  --[[FFFFFF]简单[-]]
            end
        end
        local goalName = CCommonTool.GetTxtData(info.NameId).m_str;
        if containsLevel then
            return string_format("Lv.{0} {1}{2}", info.Level, goalName, diffName);
        else
            return string_format("{0}{1}", goalName, diffName);
        end
    end
    return "";
end

-- 更新申请队伍时间
-- @param teamId 队伍ID
function UpdateAppliedTeamTime(teamId)
    if appliedTeamList == nil then
        appliedTeamList = {};
    end
    appliedTeamList[teamId] = os.time() + applyDuration;
end

-- 判断该队伍是否申请过
-- @param teamId 队伍ID
function IsAppliedTeam(teamId)
    if appliedTeamList == nil then
        return false;
    end
    local time = appliedTeamList[teamId];
    if time == nil then
        return false;
    end
    return os.time() < time;
end

-- 获取邀请列表
-- @param typeId 1:好友列表 2:公会成员列表 3:附近玩家列表
function GetInviteList(typeId)
    local list = {};
    local teamMemberIds = {};
    if HasTeam() then
        for i, mem in ipairs(teamMemberList) do
            teamMemberIds[mem.id] = true;
        end
    end
    
    if typeId == 1 then
        local friends = FriendsData.GetAllFriend(true)
        for i, friend in ipairs(friends) do
            if teamMemberIds[friend.guid] ~= true then
                table.insert(list, {
                    id = friend.guid,
                    globalId = friend.guid,
                    name = friend.name,
                    profession = friend.profession,
                    proId = friend.profession,
                    campType = friend.unionId,
                    level = friend.level,
                    fightPower = friend.fightPower,
                });
            end
        end
    elseif typeId == 2 then
        local guildMembers = GuildManager.GetOnlineMembers();
        local campType = G_UserInfo.RoleAttribute.JoinCampType;
        for i, mem in ipairs(guildMembers) do
            if teamMemberIds[mem.m_dwGlobalID] ~= true then
                table.insert(list, {
                    id = mem.globalId,
                    globalId = mem.globalId,
                    name = mem.name,
                    profession = mem.proId,
                    proId = mem.proId,
                    campType = campType,
                    level = mem.level,
                    fightPower = mem.fightPower,
                });
            end
        end
    elseif typeId == 3 then
        local roles = G_SceneMng.SceneRoleAttributes;
        local selfGlobalId = G_UserInfo.GlobalDBID;
        local count = roles.Count;
        for i = 1, count do
            local role = roles[i-1];
            if role.GlobalDBID ~= selfGlobalId and role.TeamID <= 0 then
                if teamMemberIds[role.GlobalDBID] ~= true then
                    table.insert(list, {
                        id = role.GlobalDBID,
                        globalId = role.GlobalDBID,
                        name = role.Name,
                        profession = role.ProID,
                        proId = role.ProID,
                        campType = role.JoinCampType,
                        level = role.Level,
                        fightPower = math.floor(role.BattlePower),
                    });
                end
            end
        end
    else
        error(string_format("传入的邀请列表类型{0}错误!", typeId));
    end
    return list;
end

-- 更新邀请玩家时间
-- @param globalId 玩家ID
function UpdateInvitePlayerTime(globalId)
    if invitePlayerList == nil then
        invitePlayerList = {};
    end
    invitePlayerList[globalId] = os.time() + inviteDuration;
end

-- 判断该玩家是否邀请过
-- @param globalId 玩家ID
function IsInvitedPlayer(globalId)
    if invitePlayerList == nil then
        return false;
    end
    local time = invitePlayerList[globalId];
    if time == nil then
        return false;
    end
    return os.time() < time;
end

-- 获取附近队伍ID列表
function GetNearbyTeamIds()
    local roles = G_SceneMng.SceneRoleAttributes;
    local selfGlobalId = G_UserInfo.GlobalDBID;
    local myTeamId = HasTeam() and teamData.id or 0;
    local count = roles.Count;
    local idList = {};
    for i = 1, count do
        local role = roles[i-1];
        local teamId = role.TeamID;
        if role.GlobalDBID ~= selfGlobalId and teamId > 0 and teamId ~= myTeamId then
            local exist = false;
            for _, id in ipairs(idList) do
                if id == teamId then
                    exist = true;
                    break;
                end
            end
            if not exist then
                table.insert(idList, teamId);
            end
        end
    end
    return idList;
end

-- 获取队伍成员数量
function GetTeamMemberCount()
    if HasTeam() then
        return #teamMemberList;
    end
    return 0;
end

-- 设置匹配队伍目标(没有队伍时)
-- @param goalId 队伍目标
-- @param diffIndex 活动难度索引 1:简单 2:普通 3:困难
-- @param _autoMatchTeam 是否自动匹配队伍
function SetMatchTeamGoal(goalId, diffIndex, _autoMatchTeam)
    teamHallGoalData = {id=goalId,goalId=goalId,diffIndex=diffIndex};
    autoMatchTeam = _autoMatchTeam;
end

-- 刷新队伍匹配成员时, 超时提示
-- 自动匹配超过XX秒，弹板提示：匹配时间过长是否更换 匹配职业
-- （点击取消关闭面板，点击确认关闭面板并且弹出我的队伍自动匹配改成关闭状态）
-- （如果已有ALL职业，则不执行）
function PorcessMatchMemberPrompt()
    --error("PorcessMatchMemberPrompt::0");
    if TeamManager.IsLeader() then
        if teamData.autoMatchMember ~= true then
            --error("PorcessMatchMemberPrompt::011");
            ClearTimer();
            return;
        end
        if GetTeamMemberCount() == MAX_MEMBER_COUNT then
            --error("PorcessMatchMemberPrompt::012");
            ClearTimer();
            return;
        end
        --error("PorcessMatchMemberPrompt::1");
        local proInfos = teamData.proInfos;
        local isMatchAll = false;
        local userId = G_UserInfo.GlobalDBID;
        for i, info in ipairs(proInfos) do
            local proId = info.proId;
            if info.globalId ~= userId and proId == TeamManager.MATCH_ALL_PRO_ID then
                isMatchAll = true;
                break;
            end
        end
        --error("PorcessMatchMemberPrompt::2");
        if isMatchAll then
            ClearTimer();
            return;
        end
        --error("PorcessMatchMemberPrompt::3");
        if m_TimerRunning then
            if m_CompareProInfos == nil then
                --error("匹配队员超时处理出错!");
                ClearTimer();
                return;
            end
            --error("PorcessMatchMemberPrompt::4");
            for i, info in ipairs(proInfos) do
                local compInfo = m_CompareProInfos[info.index];
                if compInfo.globalId ~= info.globalId or compInfo.proId ~= info.proId then
                    StartPromptTimer();
                    return;
                end
            end
        else
            --error("PorcessMatchMemberPrompt::6");
            StartPromptTimer();
        end
    else
        --error("PorcessMatchMemberPrompt::7");
        ClearTimer();
    end
end

-- 匹配超时处理 计时开始
function StartPromptTimer()
    --error("StartPromptTimer::0");
    ClearTimer();
    m_CompareProInfos = {};
    local proInfos = teamData.proInfos;
    for i, info in ipairs(proInfos) do
        table.insert(m_CompareProInfos, {
            id = i,
            index = i,
            proId = info.proId,
            globalId = info.globalId
        });
    end
    AddTimerEvent(m_PromptTimerName, m_PromptTime, OnPromptTimerOver);
end

-- 匹配超时处理 计时结束
function OnPromptTimerOver()
    --error("OnPromptTimerOver::0");
    if TeamManager.IsLeader() then
        ClearTimer();
        ParameterToMessageTextBox.MatchTeamMemberPrompt();
    end
end

-- 清除匹配中Timer事件
function ClearTimer()
    --error("ClearTimer::0");
    if m_TimerRunning then
        --error("ClearTimer::1");
        m_TimerRunning = false;
        m_CompareProInfos = nil;
        G_TimerMng:RemoveTimeTask(m_PromptTimerName);
    end
end

-- 处理匹配队伍继续等待弹框提示
function PorcessMatchTeamPrompt()
    ClearMatchTeamTimer();
    local closeWaitingPanel = false;
    if not autoMatchTeam or HasTeam() then
        closeWaitingPanel = true;
    else
        local info = CCommonTool.GetTeamRoomInfo(teamHallGoalData.goalId);
        if info ~= nil and info.PromptTxt > 0 then
            m_MatchTeamTimerData = Timer.Instance:AddTimer(m_MatchTeamPromptTime, 0, OnMatchTeamTimer);
        else
            closeWaitingPanel = true;
        end
        m_MatchTeamChatTimerData = Timer.Instance:AddTimer(m_MatchTeamChatTime, m_MatchTeamChatRepeatCount, OnMatchTeamChatTimer);
    end
    if closeWaitingPanel == true then
        if IsOpenPanel(ENUMPANELID.ENUM_PANEL_TEAM_MATCH_WAITING) == 1 then
            closePanel(ENUMPANELID.ENUM_PANEL_TEAM_MATCH_WAITING);
        end
    end
end

-- 继续等待提示
function OnMatchTeamTimer()
    if autoMatchTeam and not HasTeam() then
        local goalData = teamHallGoalData;
        TeamMatchWaitingPanel.Show(goalData.goalId, goalData.diffIndex);
    end
end

-- 匹配队伍喊话
function OnMatchTeamChatTimer()
    if autoMatchTeam and not HasTeam() then
        local goalData = teamHallGoalData;
        TeamProtocol.RequestMatchTeamSpeak();
    end
end

function ClearMatchTeamTimer()
    if m_MatchTeamTimerData ~= nil then
        Timer.Instance:StopTimer(m_MatchTeamTimerData);
        m_MatchTeamTimerData = nil;
    end
    if m_MatchTeamChatTimerData ~= nil then
        Timer.Instance:StopTimer(m_MatchTeamChatTimerData);
        m_MatchTeamChatTimerData = nil;
    end
end

-- 是否有人申请入队
function HasApplyTeam()
    return IsLeader() and #inviteAndApplyList > 0;
end

-- 取消选中队友状态
-- @param globalId 队员ID <=0 表示取消取消 >0表示取消指定队员(如果当前选中的是该队友)
function CancelSelectTeamMember(globalId)
    if globalId == nil then globalId = 0; end
    --如果当前选中的是队友, 取友离队, 取消选中
    local selfId = G_UserInfo.GlobalDBID;
    local selectId = G_SceneMng.CurSelectAlliedPlayerId;
    if selectId > 0 and selfId ~= selectId and (globalId <= 0 or globalId == selectId) then
        G_SceneMng:CancelSelectAlliedPlayer();
    end
end

-- 获取玩家自己的当前跟随状态
-- @return 1:跟随中 0:不跟随
function GetTeamFollowState()
    if HasTeam() then
        if IsLeader() then
            return 0;
        end
        local selfId = G_UserInfo.GlobalDBID;
        local data = GetTeamMember(selfId);
        if data ~= nil then
            return data.followState == 1 and 1 or 0;
        end
    end
    return 0;
end

-- 是否在组队跟随中
function IsTeamFollowing()
    return GetTeamFollowState() == 1;
end

-- 清除数据
function ClearData()
    ClearTimer();
    ClearMatchTeamTimer();
    inviteAndApplyList = {};
    teamMemberList = {};
    hallTeamList = {};
    nearbyTeamList = {};
    teamPanelShowRedHint = false;
    teamData = nil;
    autoMatchTeam = false;
    teamHallGoalData.id = 2;
    teamHallGoalData.goalId = 2;
    teamHallGoalData.diffIndex = 1;
    appliedTeamList = nil;
end