--[[
    field=Id, type=int, desc=主键
    field=IntenMaxExp, type=int, desc=淬炼星总经验
    field=IntenPerExp, type=int, desc=淬炼每次经验
    field=IntenItem1ID, type=int, desc=淬炼消耗道具id1
    field=IntenItem1Num, type=int, desc=淬炼消耗道具id1数量
    field=IntenItem2ID, type=int, desc=淬炼消耗道具id2
    field=IntenItem2Num, type=int, desc=淬炼消耗道具id2数量
    field=IntenMoneyNeed, type=int, desc=淬炼消耗银币
    field=AdvanItem1ID, type=int, desc=进阶消耗道具1(暂无用)
    field=AdvanItem1IDNum, type=int, desc=进阶消耗道具1数量(暂无用)
    field=AdvanItem2ID, type=int, desc=进阶消耗道具2(暂无用)
    field=AdvanItem2IDNum, type=int, desc=进阶消耗道具2数量(暂无用)
    field=AdvanNeedMoney, type=int, desc=进阶消耗银币(暂无用)
]]
module("SinhaengAdvanceTable", package.seeall)
local list={
    {Id=1,IntenMaxExp=400,IntenPerExp=200,IntenItem1ID=21341,IntenItem1Num=2,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=5,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=2,IntenMaxExp=400,IntenPerExp=200,IntenItem1ID=21341,IntenItem1Num=2,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=8,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=3,IntenMaxExp=900,IntenPerExp=300,IntenItem1ID=21341,IntenItem1Num=3,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=10,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=4,IntenMaxExp=2500,IntenPerExp=500,IntenItem1ID=21341,IntenItem1Num=5,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=15,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=5,IntenMaxExp=4800,IntenPerExp=800,IntenItem1ID=21341,IntenItem1Num=8,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=20,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=6,IntenMaxExp=8000,IntenPerExp=1000,IntenItem1ID=21341,IntenItem1Num=10,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=30,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=7,IntenMaxExp=15000,IntenPerExp=1500,IntenItem1ID=21341,IntenItem1Num=15,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=40,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=8,IntenMaxExp=25000,IntenPerExp=2500,IntenItem1ID=21341,IntenItem1Num=25,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=50,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=9,IntenMaxExp=40000,IntenPerExp=4000,IntenItem1ID=21341,IntenItem1Num=40,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=60,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=10,IntenMaxExp=60000,IntenPerExp=6000,IntenItem1ID=21341,IntenItem1Num=60,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=61,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=11,IntenMaxExp=60000,IntenPerExp=6000,IntenItem1ID=21341,IntenItem1Num=60,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=62,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0},
    {Id=12,IntenMaxExp=60000,IntenPerExp=6000,IntenItem1ID=21341,IntenItem1Num=60,IntenItem2ID=0,IntenItem2Num=0,IntenMoneyNeed=0,AdvanItem1ID=21341,AdvanItem1IDNum=63,AdvanItem2ID=0,AdvanItem2IDNum=0,AdvanNeedMoney=0}
};
local map = {[1]=list[1],[2]=list[2],[3]=list[3],[4]=list[4],[5]=list[5],[6]=list[6],[7]=list[7],[8]=list[8],[9]=list[9],[10]=list[10],[11]=list[11],[12]=list[12]};

count = 12;
Count = 12;

function Get(id)
    return map[id];
end

function GetAll()
    return list;
end

function Filter(action)
    local results = {};
    if type(action) == "function" then
        for i, data in ipairs(list) do
            if action(data) == true then
                table.insert(results, data)
            end
        end
    end
    return results;
end

function Find(cond)
    local result = nil;
    if type(cond) == "table" then
        for i, data in ipairs(list) do
            local find = false;
            for k, v in pairs(data) do
                if cond[k] ~= nil then
                    find = cond[k] == v;
                    if not find then
                        break;
                    end
                end
            end
            if find == true then
                result = data;
                break;
            end
        end
    end
    return result;
end

function FindAll(cond)
    local results = {};
    if type(cond) == "table" then
        for i, data in ipairs(list) do
            local find = false;
            for k, v in pairs(data) do
                if cond[k] ~= nil then
                    find = cond[k] == v;
                    if not find then
                        break;
                    end
                end
            end
            if find == true then
                table.insert(results, data);
            end
        end
    end
    return results;
end
