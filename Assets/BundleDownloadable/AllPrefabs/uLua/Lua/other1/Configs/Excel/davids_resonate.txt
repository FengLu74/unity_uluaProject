--[[
    field=ID, type=int, desc=主键ID
    field=Type, type=byte, desc=星魂共鸣等级
    field=NameID, type=int, desc=名称文本ID
    field=Attr1, type=int, desc=属性种类1 
    field=AttrValue1, type=int, desc=属性值1
    field=Attr2, type=int, desc=属性种类2
    field=AttrValue2, type=int, desc=属性值2
    field=Attr3, type=int, desc=属性种类3
    field=AttrValue3, type=int, desc=属性值3
    field=Attr4, type=int, desc=属性种类4
    field=AttrValue4, type=int, desc=属性值4
]]
module("DavidsResonateTable", package.seeall)
local list={
    {ID=1,Type=1,NameID=74241,Attr1=11,AttrValue1=215,Attr2=21,AttrValue2=215,Attr3=11,AttrValue3=215,Attr4=21,AttrValue4=215},
    {ID=2,Type=2,NameID=74242,Attr1=11,AttrValue1=645,Attr2=21,AttrValue2=645,Attr3=11,AttrValue3=645,Attr4=21,AttrValue4=645},
    {ID=3,Type=3,NameID=74243,Attr1=11,AttrValue1=1245,Attr2=21,AttrValue2=1245,Attr3=11,AttrValue3=1245,Attr4=21,AttrValue4=1245},
    {ID=4,Type=4,NameID=74244,Attr1=11,AttrValue1=2015,Attr2=21,AttrValue2=2015,Attr3=11,AttrValue3=2015,Attr4=21,AttrValue4=2015},
    {ID=5,Type=5,NameID=74245,Attr1=11,AttrValue1=2960,Attr2=21,AttrValue2=2960,Attr3=11,AttrValue3=2960,Attr4=21,AttrValue4=2960},
    {ID=6,Type=6,NameID=74246,Attr1=11,AttrValue1=3990,Attr2=21,AttrValue2=3990,Attr3=11,AttrValue3=3990,Attr4=21,AttrValue4=3990},
    {ID=7,Type=7,NameID=74247,Attr1=11,AttrValue1=5100,Attr2=21,AttrValue2=5100,Attr3=11,AttrValue3=5100,Attr4=21,AttrValue4=5100},
    {ID=8,Type=8,NameID=74248,Attr1=11,AttrValue1=6300,Attr2=21,AttrValue2=6300,Attr3=11,AttrValue3=6300,Attr4=21,AttrValue4=6300},
    {ID=9,Type=9,NameID=74249,Attr1=11,AttrValue1=7545,Attr2=21,AttrValue2=7545,Attr3=11,AttrValue3=7545,Attr4=21,AttrValue4=7545},
    {ID=10,Type=10,NameID=74250,Attr1=11,AttrValue1=8830,Attr2=21,AttrValue2=8830,Attr3=11,AttrValue3=8830,Attr4=21,AttrValue4=8830}
};
local map = {[1]=list[1],[2]=list[2],[3]=list[3],[4]=list[4],[5]=list[5],[6]=list[6],[7]=list[7],[8]=list[8],[9]=list[9],[10]=list[10]};

count = 10;
Count = 10;

function Get(id)
    return map[id];
end

function GetAll()
    return list;
end

function Filter(action)
    local results = {};
    if type(action) == "function" then
        for i, data in ipairs(list) do
            if action(data) == true then
                table.insert(results, data)
            end
        end
    end
    return results;
end

function Find(cond)
    local result = nil;
    if type(cond) == "table" then
        for i, data in ipairs(list) do
            local find = false;
            for k, v in pairs(data) do
                if cond[k] ~= nil then
                    find = cond[k] == v;
                    if not find then
                        break;
                    end
                end
            end
            if find == true then
                result = data;
                break;
            end
        end
    end
    return result;
end

function FindAll(cond)
    local results = {};
    if type(cond) == "table" then
        for i, data in ipairs(list) do
            local find = false;
            for k, v in pairs(data) do
                if cond[k] ~= nil then
                    find = cond[k] == v;
                    if not find then
                        break;
                    end
                end
            end
            if find == true then
                table.insert(results, data);
            end
        end
    end
    return results;
end
