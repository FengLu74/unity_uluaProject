module("CultivateChangePanel", package.seeall)

---------------------------------------label路径---------------------------------------
-- 获得多少点天赋点的文本
local m_talentNum = "TalentNum/Label_TalentNum";
-- 限制角色等级上限
local m_limitLevel = "TalentNum/Label_LimitLevel";
-- 道具数量
local m_itemNum = "Runes/Item/Label_NeedNum";

-- 上一个称号
local m_currentCultivateStr = "BG/Sprite_JinJie/NotMaxLevel/BeforeLabel";
-- 当前称号
local m_nextCultivateStr = "BG/Sprite_JinJie/NotMaxLevel/AfterLabel";
-----------------------------------------button路径--------------------------------------
-- 道具不足按钮
local m_itemNotEnough = "Runes/Item/Sprite_Less";
-- 进阶按钮
local m_jinJieButton = "JinJieButton";
-----------------------------------------Sprite路径------------------------------------
-- 进阶标题
local m_clutivateTitleStr = "BG/Sprite_JinJie";
-- 道具图标
local m_itemIconStr = "Runes/Item/Sprite_Icon";
----------------------------------gameobject所在的路径---------------------------------
-- 符文所在的位置
local m_runeStr = "Runes";
-- 获得多少点天赋点的文本
local m_talentNumObjStr = "TalentNum";
-- 禁止点击所在的遮罩位置
local m_zheZhao = "ZheZhao";
-- 达到最高等级
local m_maxLevelStr = "Runes/MaxLevel";
-- 道具信息
local m_itemInfo = "Runes/Item";

-- 未达到最高等级
local m_notMaxCultivateStr = "BG/Sprite_JinJie/NotMaxLevel";
-- 最高称号
local m_maxCultivateStr = "BG/Sprite_JinJie/MaxLevel";
-- 下方5条信息的位置
local m_contentStr = "/Content";
-- 装备翅膀按钮
local m_ButtonEquipPath = "Button_Equip";
-- 卸载翅膀按钮
local m_ButtonUnEquipPath = "Button_UnEquip";
-- 培养进度条
local m_ProgressParentPath = "Active";
local m_ProgressPath = "Active/ProgressParent";
-- 培养十次按钮
local m_Peiyang10ButtonPath = "Peiyang10Button";
-- 培养一次按钮
local m_PeiyangButtonPath = "PeiyangButton";
-- 翅膀列表
local m_WingListPath = "Left/Wings/WingList";
-- 翅膀解锁提示
local m_LockPath = "Lock";
-- 翅膀解锁文本
local m_LockLabelPath = "Lock/Label";
--翅膀屏蔽显示
local left= "Left";

----------------------------------通用的名称路径---------------------------------------
-- 之后hp数值的位置
local m_hpAfterNum = "Label-ShengMing2-Num";
-- 之后ap数值的位置
local m_apAfterNum = "Label-WaiGong2-Num";
-- 之后map数值的位置
local m_mapAfterNum = "Label-NeiGong2-Num";
-- 之后dp数值的位置
local m_dpAfterNum = "Label-WaiFang2-Num";
-- 之后mdp数值的位置
local m_mdpAfterNum = "Label-NeiFang2-Num"
--  hp数值的位置
local m_hpNum = "Label-ShengMing-Num";
--  ap数值的位置
local m_apNum = "Label-WaiGong-Num";
--  dp数值的位置
local m_dpNum = "Label-WaiFang-Num";
--  map数值的位置
local m_mapNum = "Label-NeiGong-Num";
-- mdp数值的位置
local m_mdpNum = "Label-NeiFang-Num";
-- 添加的属性值
local m_attrAddNum = "Label_Add";

-- 最大等级
local m_maxContent = "MaxContent";
-- 属性等级
local m_attrContent = "Content";
-- hp的位置
local m_hpStr = "/Content1/";
-- ap的位置
local m_apStr = "/Content2/";
-- mapp的位置
local m_mapStr = "/Content3/";
-- dp的位置
local m_dpStr = "/Content4/";
-- mdp的位置
local m_mdpStr = "/Content5/";
--  属性名称
local m_hpName = "Label-ShengMing";
--  属性名称
local m_apName = "Label-WaiGong";
--  属性名称
local m_dpName = "Label-WaiFang";
--  属性名称
local m_mapName = "Label-NeiGong";
--  属性名称
local m_mdpName = "Label-NeiFang";
-----------------------------------引用的对象------------------------------------------
-- 面板的对象
local m_panelObject = nil;
-- 进阶标题object
local m_cultivateTitle = nil;
-- 各属性
local m_cultivateLevel = nil
-- 下一阶数属性数据
local nextCultivateInfo = nil;
local nextAttrInfo = nil;
-- 当前属性
local m_hp = 0;
local m_ap = 0;
local m_map = 0;
local m_dp = 0;
local m_mdp = 0;
-- 下一阶增加的属性
local m_hpAdd = 0;
local m_apAdd = 0;
local m_mapAdd = 0;
local m_dpAdd = 0;
local m_mdpAdd = 0;

-- 进阶动作
local m_animator = nil;
-- 是否播放缩放效果
local m_palyScale = false;

-- 翅膀列表
local m_WingList = nil;
-- 翅膀装备按钮
local m_ButtonEquip = nil;
-- 翅膀卸载按钮
local m_ButtonUnEquip = nil;
-- 培养进度条
local m_ProgressParent = nil;
local m_Progress = nil;
-- 培养十次按钮
local m_Peiyang10Button = nil;
-- 培养一次按钮
local m_PeiyangButton = nil;
-- 所有进阶表数据
local m_CultivateInfos = nil;
local m_CultivateInfoDict = nil;
-- 换装组件
local m_PlayerChangeEquip = nil;
-- 当前翅膀列表选中的数据
local m_SelectedData = nil;
-----------------------------------一些写死的规定--------------------------------------
-- 最大修为等级
local MAX_LEVEL = 11;
-- 最大修为等级
local MAX_SUBLEVEL = 10;
-- 道具不足的显示颜色
local m_notEnoughColor = "FE2626";
-- 道具充足的显示颜色
local m_itemEnoughColor = "FFFFFF";
-- 翅膀类型
local FASHION_WING_TYPE = 4;

local m_attrIndexData1 = 0;
local m_attrIndexData2 = 0;
local m_attrIndexData3 = 0;
local m_attrIndexData4 = 0;
local m_attrIndexData5 = 0;
--主角界面是否送翅膀
local wingUse=false;

------------------------------------BaseLua调用的同名方法------------------------------
-- 同Unity里面的start，通过baselua挂在界面tag的object下
function Start()
    -- 初始化物体，界面信息的赋值
    InitObjects();
    -- 初始化按钮信息
    InitOnClick();
    -- 初始化信息
    InitInfo();
    -- 面板创建成功
    m_bCreateSuccess = true;
end
function OnEnable()
    if m_bCreateSuccess == true then
        -- 初始化界面所有信息
        InitInfo();
    end
end
function OnDisable()
    m_SelectedData = nil;
end
-- 同Unity里面的destroy，通过baselua挂在界面tag的object下
function OnDestroy()
    m_panelObject = nil;
    m_cultivateTitle = nil;
    m_bCreateSuccess = false;
    m_palyScale = false;
    m_WingList = nil;
    m_ButtonEquip = nil;
    m_ButtonUnEquip = nil;
    m_ProgressParent = nil;
    m_Progress = nil;
    m_Peiyang10Button = nil;
    m_PeiyangButton = nil;
    m_CultivateInfos = nil;
    m_CultivateInfoDict = nil;
    m_PlayerChangeEquip = nil;
end

-----------------------------------本lua文件自调用方法--------------------------------
-- 初始化物体，界面信息的赋值
function InitObjects()
    -- 面板对象
    m_panelObject = FindPanelObjWithPanelID(ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL);
    -- 进阶标题对象
    m_cultivateTitle = child(m_panelObject, m_clutivateTitleStr).gameObject;
    if wingUse then
        m_WingList = GetComponent(m_panelObject, m_WingListPath, "UIListView");
        m_ButtonEquip = child(m_panelObject, m_ButtonEquipPath).gameObject;
        m_ButtonUnEquip = child(m_panelObject, m_ButtonUnEquipPath).gameObject;
    else
        leftWing=child(m_panelObject,left).gameObject;
        m_ButtonEquip = child(m_panelObject, m_ButtonEquipPath).gameObject;
        m_ButtonUnEquip = child(m_panelObject, m_ButtonUnEquipPath).gameObject;
        leftWing:SetActive(false);
        m_ButtonEquip:SetActive(false);
        m_ButtonUnEquip:SetActive(false);
    end
    m_ProgressParent = child(m_panelObject, m_ProgressParentPath).gameObject;
    m_Progress = child(m_panelObject, m_ProgressPath).gameObject;
    m_Peiyang10Button = child(m_panelObject, m_Peiyang10ButtonPath).gameObject;
    m_PeiyangButton = child(m_panelObject, m_PeiyangButtonPath).gameObject;

    m_attrIndexData1 = CCommonTool.GetDefineInfo(G_AtrTable1[1]):GetIntContent();
    m_attrIndexData2 = CCommonTool.GetDefineInfo(G_AtrTable1[2]):GetIntContent();
    m_attrIndexData3 = CCommonTool.GetDefineInfo(G_AtrTable1[3]):GetIntContent();
    m_attrIndexData4 = CCommonTool.GetDefineInfo(G_AtrTable1[5]):GetIntContent();
    m_attrIndexData5 = CCommonTool.GetDefineInfo(G_AtrTable1[6]):GetIntContent();

    m_CultivateInfos = {};
    m_CultivateInfoDict = {};
    local proId = G_UserInfo.RoleAttribute.ProID;
    local minId = CCommonTool.GetRoleDateInfo(proId).CultivateId;
    local maxId = minId + MAX_LEVEL - 1;
    error("minId"..minId.."_maxId"..maxId);
    for culId = minId, maxId do
        local culInfo = CCommonTool.GetRoleCultivateInfo(culId);
        table.insert(m_CultivateInfos, culInfo);
        m_CultivateInfoDict[culId] = culInfo;
    end
end

-- 初始化信息
function InitInfo()
    -- 初始化左侧角色信息
    InitPlayerInfo();
    -- 加载玩家模型
    InitPlayerModel();
    -- 初始化翅膀列表
    if wingUse then
        InitWingList();
    end
end

-- 初始化按钮信息
function InitOnClick()
    -- 魂石不足的点击事件
    SetGameObjectEvent(m_itemNotEnough, NeedToBeDoneClick, m_panelObject);
    -- 关闭按钮的事件
    SetGameObjectEvent(m_zheZhao, OnCloseClick, m_panelObject);
    -- 进阶点击事件
    SetGameObjectEvent(m_jinJieButton, OnJinJieClick, m_panelObject);
    if wingUse then
        m_WingList:SetInitCallback(OnWingListViewInit);
        m_WingList:SetClickCallback(OnWingListViewCLick);
        m_WingList:SetSelectedCallback(OnWingListViewSelected);
        UIEventListener.Get(m_ButtonEquip).onClick = LuaHelper.OnClick(OnButtonEquipClick);
        UIEventListener.Get(m_ButtonUnEquip).onClick = LuaHelper.OnClick(OnButtonUnEquipClick);
    end
    UIEventListener.Get(m_Peiyang10Button).onClick = LuaHelper.OnClick(OnPeiyang10ButtonClick);
    UIEventListener.Get(m_PeiyangButton).onClick = LuaHelper.OnClick(OnPeiyangButtonClick);


end
-- 初始化左侧角色信息
function InitPlayerInfo()
    local cultivateLevel = G_UserInfo.RoleAttribute.CultivateLv;
    local cultivateSubLevel = G_UserInfo.RoleAttribute.CultivateSubLv;
    local cultivateInfo = m_CultivateInfos[cultivateLevel];
    local PlayerCultivateID = cultivateInfo.ID;
    local roleAttrInfo = CCommonTool.GetRoleAttributeInfo(PlayerCultivateID);
    local roleLevel = G_UserInfo.RoleAttribute.Level - 1;
    if cultivateLevel < MAX_LEVEL then
        nextAttrInfo = CCommonTool.GetRoleAttributeInfo(PlayerCultivateID + 1);
        nextCultivateInfo = m_CultivateInfos[cultivateLevel + 1];
        if cultivateSubLevel < MAX_SUBLEVEL then
            m_hpAdd  = cultivateInfo.PrAttNum1;--增加的生命值
            m_apAdd  = cultivateInfo.PrAttNum2;--增加的外攻值
            m_mapAdd = cultivateInfo.PrAttNum3;--增加的外防值
            m_dpAdd  = cultivateInfo.PrAttNum4;--增加的内攻值
            m_mdpAdd = cultivateInfo.PrAttNum5;--增加的内防值
        else
            m_hpAdd = math.ceil(roleLevel *(nextAttrInfo.HpGrow - roleAttrInfo.HpGrow));--增加的生命值
            m_apAdd = math.ceil(roleLevel *(nextAttrInfo.ApGrow - roleAttrInfo.ApGrow));--增加的外攻值
            m_mapAdd = math.ceil(roleLevel *(nextAttrInfo.MapGrow - roleAttrInfo.MapGrow));--增加的外防值
            m_dpAdd = math.ceil(roleLevel *(nextAttrInfo.DpGrow - roleAttrInfo.DpGrow));--增加的内攻值
            m_mdpAdd = math.ceil(roleLevel *(nextAttrInfo.MdpGrow - roleAttrInfo.MdpGrow));--增加的内防值
        end
    else
        nextAttrInfo = roleAttrInfo;
        nextCultivateInfo = cultivateInfo;
    end
    SetRightState(cultivateLevel, cultivateSubLevel);
    
    m_hp = math.modf(G_UserInfo.RoleAttribute.MaxHealth);-- 当前生命值
    m_ap = math.modf(G_UserInfo.RoleAttribute.Ap);-- 当前外攻值
    m_map = math.modf(G_UserInfo.RoleAttribute.Map);-- 当前外防值
    m_dp = math.modf(G_UserInfo.RoleAttribute.Dp);-- 当前内攻值
    m_mdp = math.modf(G_UserInfo.RoleAttribute.Mdp);-- 当前内防值

        
    InitPeiyangProgress();
    if cultivateLevel >= MAX_LEVEL then
        InitMaxContent(cultivateInfo);
    else
        InitAttrContent();
        InitCostItemContent(cultivateLevel, cultivateSubLevel);
        -- 设置玩家的修为等级显示
        SetLabelTextByID(m_currentCultivateStr, cultivateInfo.QualityPng, m_panelObject);
        -- 设置下一级修为等级显示
        local nextCultivateInfo = CCommonTool.GetRoleCultivateInfo(PlayerCultivateID + 1);
        if nextCultivateInfo ~= nil then
            SetLabelTextByID(m_nextCultivateStr, nextCultivateInfo.QualityPng, m_panelObject);
        end
    end
    -- 设置天赋文本的显示
    SetLabelTextByID(m_talentNum, nextCultivateInfo.TalentTxt, m_panelObject);
    -- 道具信息
    for index = 1, 5 do
        local path = nil;
        if cultivateLevel < MAX_LEVEL then
            path = m_attrContent .. m_contentStr .. index;
        else
            path = m_maxContent .. m_contentStr .. index;
        end
        local contentObject = child(m_panelObject, path).gameObject;
        contentObject.transform.localScale = Vector3.zero;
    end
    m_cultivateTitle.transform.localScale = Vector3.zero;
    local obj = child(m_panelObject, m_talentNumObjStr).gameObject;
    obj.transform.localScale = Vector3.zero;
    TitleTweenOnFinishEvent();
    -- 关闭遮罩
    SetGameObjectState(m_zheZhao, false, m_panelObject);

    if cultivateLevel < MAX_LEVEL then
        local limitLevel = GetLimitLevel(cultivateLevel);
        local text = CCommonTool.GetTxtData(12462).m_str;
        text = string_format(text, limitLevel);
        SetLabelContent(m_limitLevel, text, m_panelObject);
    end
end

function InitMaxContent(cultivateInfo)
    -- 最高等级显示信息
    SetLabelTextByID(m_maxCultivateStr, cultivateInfo.QualityPng, m_panelObject);
    -- 设置最大的生命值
    SetLabelContent(m_maxContent .. m_hpStr .. m_hpNum, m_hp, m_panelObject);
    -- 设置最大的外攻值
    SetLabelContent(m_maxContent .. m_apStr .. m_apNum, m_ap, m_panelObject);
    -- 设置最大的外防值
    SetLabelContent(m_maxContent .. m_mapStr .. m_mapNum, m_map, m_panelObject);
    -- 设置最大的内攻值
    SetLabelContent(m_maxContent .. m_dpStr .. m_dpNum, m_dp, m_panelObject);
    -- 设置最大的内防值
    SetLabelContent(m_maxContent .. m_mdpStr .. m_mdpNum, m_mdp, m_panelObject);

    -- 设置最大的生命名称
    SetLabelTextByID(m_maxContent .. m_hpStr .. m_hpName, CCommonTool.GetAttrIndexInfo(m_attrIndexData1).TextID, m_panelObject);
    -- 设置最大的外攻名称
    SetLabelTextByID(m_maxContent .. m_apStr .. m_apName, CCommonTool.GetAttrIndexInfo(m_attrIndexData2).TextID, m_panelObject);
    -- 设置最大的外防名称
    SetLabelTextByID(m_maxContent .. m_mapStr .. m_mapName, CCommonTool.GetAttrIndexInfo(m_attrIndexData3).TextID, m_panelObject);
    -- 设置最大的内攻名称
    SetLabelTextByID(m_maxContent .. m_dpStr .. m_dpName, CCommonTool.GetAttrIndexInfo(m_attrIndexData4).TextID, m_panelObject);
    -- 设置最大的内防名称
    SetLabelTextByID(m_maxContent .. m_mdpStr .. m_mdpName, CCommonTool.GetAttrIndexInfo(m_attrIndexData5).TextID, m_panelObject);
end

function InitAttrContent()
    -- 设置之前的生命值
    SetLabelContent(m_attrContent .. m_hpStr .. m_hpNum, m_hp, m_panelObject);
    -- 设置之后的生命值
    SetLabelContent(m_attrContent .. m_hpStr .. m_hpAfterNum, m_hp + m_hpAdd, m_panelObject);
    -- 设置添加的生命值
    SetLabelContent(m_attrContent .. m_hpStr .. m_attrAddNum, m_hpAdd, m_panelObject);
    -- 设置之前的外攻值
    SetLabelContent(m_attrContent .. m_apStr .. m_apNum, m_ap, m_panelObject);
    -- 设置之后的外攻值
    SetLabelContent(m_attrContent .. m_apStr .. m_apAfterNum, m_ap + m_apAdd, m_panelObject);
    -- 设置添加的外攻值
    SetLabelContent(m_attrContent .. m_apStr .. m_attrAddNum, m_apAdd, m_panelObject);
    -- 设置之前的外防值
    SetLabelContent(m_attrContent .. m_mapStr .. m_mapNum, m_map, m_panelObject);
    -- 设置之后的外防值
    SetLabelContent(m_attrContent .. m_mapStr .. m_mapAfterNum, m_map + m_mapAdd, m_panelObject);
    -- 设置添加的外防值
    SetLabelContent(m_attrContent .. m_mapStr .. m_attrAddNum, m_mapAdd, m_panelObject);
    -- 设置之前的内攻值
    SetLabelContent(m_attrContent .. m_dpStr .. m_dpNum, m_dp, m_panelObject);
    -- 设置之后的内攻值
    SetLabelContent(m_attrContent .. m_dpStr .. m_dpAfterNum, m_dp + m_dpAdd, m_panelObject);
    -- 设置添加的内攻值
    SetLabelContent(m_attrContent .. m_dpStr .. m_attrAddNum, m_dpAdd, m_panelObject);
    -- 设置之前的内防值
    SetLabelContent(m_attrContent .. m_mdpStr .. m_mdpNum, m_mdp, m_panelObject);
    -- 设置之后的内防值
    SetLabelContent(m_attrContent .. m_mdpStr .. m_mdpAfterNum, m_mdp + m_mdpAdd, m_panelObject);
    -- 设置添加的内防值
    SetLabelContent(m_attrContent .. m_mdpStr .. m_attrAddNum, m_mdpAdd, m_panelObject);
    -- 设置生命名称
    SetLabelTextByID(m_attrContent .. m_hpStr .. m_hpName, CCommonTool.GetAttrIndexInfo(m_attrIndexData1).TextID, m_panelObject);
    -- 设置外攻名称
    SetLabelTextByID(m_attrContent .. m_apStr .. m_apName, CCommonTool.GetAttrIndexInfo(m_attrIndexData2).TextID, m_panelObject);
    -- 设置外防名称
    SetLabelTextByID(m_attrContent .. m_mapStr .. m_mapName, CCommonTool.GetAttrIndexInfo(m_attrIndexData3).TextID, m_panelObject);
    -- 设置内攻名称
    SetLabelTextByID(m_attrContent .. m_dpStr .. m_dpName, CCommonTool.GetAttrIndexInfo(m_attrIndexData4).TextID, m_panelObject);
    -- 设置内防名称
    SetLabelTextByID(m_attrContent .. m_mdpStr .. m_mdpName, CCommonTool.GetAttrIndexInfo(m_attrIndexData5).TextID, m_panelObject);
end

-- 消耗信息
function InitCostItemContent(level, subLevel)
    local cultivateInfo = m_CultivateInfos[level];
    local needItemNum = 0;
    local ExID = 0;
    if subLevel < MAX_SUBLEVEL then
        ExID = cultivateInfo.ProveItem;
        needItemNum = cultivateInfo.ProveItemNum;
    else
        ExID = cultivateInfo.QualityNeedItem;
        needItemNum = cultivateInfo.QualityItemNum;
    end
    local hasItemNum = G_BagMng:GetExcelItemNum(ENUM_UI_PANEL.UI_PANEL_ITEM_ITEM, ExID);
    --  设置进阶图标信息
    SetItemShowByExcelIDV04(m_panelObject, m_itemInfo, EDefineContentID.TYPE_CULTIVATECHANGEPANEL_ITEM, 1, true, 20, ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL);
    -- 道具tips显示
    SetItemToolTipsEvent(m_panelObject, m_itemInfo, ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL, false, EDefineContentID.TYPE_CULTIVATECHANGEPANEL_ITEM);
    if hasItemNum < needItemNum then
        SetLabelColor(m_itemNum, m_notEnoughColor, m_panelObject);
        SetGameObjectState(m_itemNotEnough, true, m_panelObject);
    else
        SetLabelColor(m_itemNum, m_itemEnoughColor, m_panelObject);
        SetGameObjectState(m_itemNotEnough, false, m_panelObject);
    end
    SetLabelContent(m_itemNum, hasItemNum .. "/" .. needItemNum, m_panelObject);
end

function SetRightState(level, subLevel)
    local isMaxLevel = level >= MAX_LEVEL;
    local isMaxSubLevel = subLevel >= MAX_SUBLEVEL;
    if isMaxLevel == true then
        SetGameObjectState(m_maxContent, true, m_panelObject);
        SetGameObjectState(m_attrContent, false, m_panelObject);
        SetGameObjectState(m_talentNum, false, m_panelObject);
        SetGameObjectState(m_limitLevel, false, m_panelObject);
        SetGameObjectState(m_notMaxCultivateStr, false, m_panelObject);
        SetGameObjectState(m_maxCultivateStr, true, m_panelObject);
        SetGameObjectState(m_maxLevelStr, true, m_panelObject);
        SetGameObjectState(m_itemInfo, false, m_panelObject);
        SetGameObjectState(m_jinJieButton, false, m_panelObject);
        m_Peiyang10Button:SetActive(false);
        m_PeiyangButton:SetActive(false);
    else
        SetGameObjectState(m_maxContent, false, m_panelObject);
        SetGameObjectState(m_attrContent, true, m_panelObject);
        SetGameObjectState(m_talentNum, isMaxSubLevel, m_panelObject);
        SetGameObjectState(m_limitLevel, true, m_panelObject);
        SetGameObjectState(m_notMaxCultivateStr, true, m_panelObject);
        SetGameObjectState(m_maxCultivateStr, false, m_panelObject);
        SetGameObjectState(m_maxLevelStr, false, m_panelObject);
        SetGameObjectState(m_itemInfo, true, m_panelObject);
        SetGameObjectState(m_jinJieButton, isMaxSubLevel, m_panelObject);
        m_Peiyang10Button:SetActive(not isMaxSubLevel);
        m_PeiyangButton:SetActive(not isMaxSubLevel);
    end
end

function GetLimitLevel(cultivateLevel)
    local list = CCommonTool.GetAllExpInfo();
    local count = list.Count;
    local level = 0;
    for i = 1, count-1 do
        local info = list[i];
        if info.NeedQualityLevel <= cultivateLevel then
            if level == 0 or info.PlayerLevel > level then
                level = info.PlayerLevel;
            end
        end
    end
    return level;
end

-- 加载玩家模型
function InitPlayerModel()
    local buffer = ByteBuffer.New();
    buffer:WriteInt(ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL);
    G_PanelMng:SetSceneUIdataByLua(buffer);
end

-- 缓存进阶动画模型
function SaveAnimator(animator)
    if wingUse then
        m_animator = animator;
        m_PlayerChangeEquip = animator.gameObject:GetComponent("CPlayerChangeEquip");
        -- 下次大版本更新时改回来
        WingPanel.SaveAnimator(animator);
    end
end

-- 标题动画播放完毕执行的事件
function TitleTweenOnFinishEvent()
    if m_palyScale == true then
        CCommonTool.TweenScaleNewBegin(m_cultivateTitle, .2, Vector3.one, Vector3.zero, .2);
    else
        CCommonTool.TweenScaleNewBegin(m_cultivateTitle, .2, Vector3.one, Vector3.one, 0);
    end

    local cultivateInfo = m_CultivateInfos[G_UserInfo.RoleAttribute.CultivateLv];
    if cultivateInfo ~= nil then
        local PlayerCurrentNeedItemNum = cultivateInfo.QualityItemNum;
        for index = 1, 5 do
            local path = nil;
            if cultivateInfo.attribute_lv < MAX_LEVEL then
                path = m_attrContent .. m_contentStr .. index;
            else
                path = m_maxContent .. m_contentStr .. index;
            end
            local contentObject = child(m_panelObject, path).gameObject;
            if m_palyScale == true then
                CCommonTool.TweenScaleNewBegin(contentObject, 0.2, Vector3.one, Vector3.zero,(index) * 0.1 + 0.1);
            else
                CCommonTool.TweenScaleNewBegin(contentObject, 0.2, Vector3.one, Vector3.one, 0);
            end

        end
        local obj = child(m_panelObject, m_talentNumObjStr).gameObject;
        if m_palyScale == true then
            CCommonTool.TweenScaleNewBegin(obj, 0.2, Vector3.one, Vector3.zero, 0.7);
        else
            CCommonTool.TweenScaleNewBegin(obj, 0.2, Vector3.one, Vector3.one, 0);
        end
        m_palyScale = false;
    end

end

-- 进阶点击完成回调
function JinJieCallBackOver()
    local buffer = ByteBuffer.New();
    buffer:WriteUShort(GMI_CTOS_LGS_LEVELUP_QUALITY);
    G_NetWorkMng:SendMessage(buffer);
    G_MusicMng:OnLoadMusic(4030);
end

-- 初始化翅膀列表
function InitWingList()
    m_ButtonEquip:SetActive(false);
    m_ButtonUnEquip:SetActive(false);
    m_WingList:RemoveAll();
    for i, v in ipairs(m_CultivateInfos) do
        if v.WingsId > 0 then
            m_WingList:AddData(v);
        end
    end
end

-- 培养进度
function InitPeiyangProgress()
    local level = G_UserInfo.RoleAttribute.CultivateLv;
    local subLevel = G_UserInfo.RoleAttribute.CultivateSubLv;
    if level >= MAX_LEVEL then
        m_ProgressParent:SetActive(false);
        return;
    end
    m_ProgressParent:SetActive(true);
    for i = 1, 10 do
        SetGameObjectState("Sprite"..i, subLevel >= i, m_Progress);
    end
end

--------------------------------------按钮事件方法------------------------------------
-- 关闭按钮事件
function OnCloseClick(e)
    closePanel(ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL);
end

-- 魂石不足点击事件
function NeedToBeDoneClick()
    local cultivateInfo = m_CultivateInfos[G_UserInfo.RoleAttribute.CultivateLv];
    if cultivateInfo ~= nil then
        local ExID = cultivateInfo.QualityNeedItem;
        GetWayPanel.Show(ExID, ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL);
    end
end

-- 进阶按钮的点击
function OnJinJieClick()
    local cultivateInfo = m_CultivateInfos[G_UserInfo.RoleAttribute.CultivateLv];
    if cultivateInfo == nil then
        return;
    end
    local ExID = cultivateInfo.QualityNeedItem;
    local PlayerCurrentItemNum = G_BagMng:GetExcelItemNum(ENUM_UI_PANEL.UI_PANEL_ITEM_ITEM, ExID);
    local PlayerCurrentNeedItemNum = cultivateInfo.QualityItemNum;
    if cultivateInfo.attribute_lv == MAX_LEVEL then
        ShowSystemFlowTips(3720);
        G_MusicMng:OnLoadMusic(4011);
        return;
    end

    local playerLevel = G_UserInfo.RoleAttribute.Level;
    if playerLevel < cultivateInfo.QualityNeedLv then
        local paraTable = { };
        table.insert(paraTable, cultivateInfo.QualityNeedLv)
        ShowSystemFlowTips(3721, nil, paraTable);
        G_MusicMng:OnLoadMusic(4011);
        return;
    end
    if PlayerCurrentItemNum >= PlayerCurrentNeedItemNum then
        InitPlayerModel();
        local buffer = ByteBuffer.New();
        buffer:WriteUShort(GMI_CTOS_LGS_LEVELUP_QUALITY);
        G_NetWorkMng:SendMessage(buffer);
        G_MusicMng:OnLoadMusic(4030);
        m_animator:Play("JinJie01_mirror")
        G_MusicMng:OnLoadMusic(4010);
        m_palyScale = true;
    else
        G_MusicMng:OnLoadMusic(4011);
        ShowSystemFlowTips(ENUM_SYS_FLOWTIPS_EVENT.ENUM_EVENT_SPRITESTONELACK);
    end
end


-- 翅膀列表初始化
function OnWingListViewInit(listView, cell, data)
    local culInfo = data;
    local fashionId = data.WingsId;
    local fashionInfo = CCommonTool.GetFashion(fashionId);
    local culLevel = G_UserInfo.RoleAttribute.CultivateLv;
    local isWear = FashionManager.GetFashionState(FASHION_WING_TYPE, fashionId) == FashionManager.WEAR_STATE;
    SetFashionItem(cell.gameObject, culLevel < culInfo.attribute_lv, isWear, fashionInfo.ItemId);
end

-- 设置单个装备信息
-- @param item 时装Item对象
-- @param isLock 是否解锁
-- @param excelId 时装ItemId
function SetFashionItem(go, isLock, isWear, excelId)
    SetGameObjectState("Equip", true, go);
    SetGameObjectState("Lock", isLock == true, go);
    SetGameObjectState("Wear", isWear == true, go);
    SetItemShowByExcelIDV04(go, "Equip", excelId, 1, false, 11, ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL);
end

-- 翅膀列表选中
function OnWingListViewSelected(listView, dataIndex)
    m_SelectedData = listView:GetData(dataIndex);
    InitEquipButtonState();
end

function InitEquipButtonState()
    if m_SelectedData ~= nil then
        local culLevel = G_UserInfo.RoleAttribute.CultivateLv;
        local isLock = culLevel < m_SelectedData.attribute_lv;
        local isWear = FashionManager.GetFashionState(FASHION_WING_TYPE, m_SelectedData.WingsId) == FashionManager.WEAR_STATE;
        m_ButtonEquip:SetActive(not isLock and not isWear);
        m_ButtonUnEquip:SetActive(not isLock and isWear);
        SetGameObjectState(m_LockPath, isLock, m_panelObject);
        if isLock == true then
            local name = CCommonTool.GetTxtData(m_SelectedData.QualityPng).m_str;
            SetLabelContent(m_LockLabelPath, string_format(--[[{0}解锁]]CCommonTool.GetTxtData(9085).m_str, name), m_panelObject);
        end
    else
        m_ButtonEquip:SetActive(false);
        m_ButtonUnEquip:SetActive(false);
        SetGameObjectState(m_LockPath, false, m_panelObject);
    end
end

-- 翅膀列表点击
function OnWingListViewCLick(listView, cell, go)
    local culInfo = listView:GetData(cell.dataIndex);
    ChangePlayerWing(culInfo.WingsId);
end

function ChangePlayerWing(wingId)
    if m_PlayerChangeEquip ~= nil then
        local fashionInfo = CCommonTool.GetFashion(wingId);
        if fashionInfo ~= nil then
            local modelId = fashionInfo.ModelresId;
            m_PlayerChangeEquip:SetUIFashion(4, modelId, true);
        end
    end
end

-- 装备翅膀按钮
function OnButtonEquipClick()
    if m_SelectedData ~= nil then
        local data = {
            Type = FASHION_WING_TYPE,
            State = FashionManager.WEAR_STATE,
            ExcelId = m_SelectedData.WingsId
        };
        FashionProtocol.RequestFashionOperate(data);
    end
    --ReportManager.RequestReportPanel(10297);
end

-- 卸载翅膀按钮
function OnButtonUnEquipClick()
    if m_SelectedData ~= nil then
        local data = {
            Type = FASHION_WING_TYPE,
            State = FashionManager.OFF_STATE,
            ExcelId = m_SelectedData.WingsId
        };
        FashionProtocol.RequestFashionOperate(data);
    end
end

-- 培养十次按钮
function OnPeiyang10ButtonClick(gameObject)
    error("OnPeiyang10ButtonClick");
    RequestPeiyang(10);
	--角色-人物进阶10次上报
	if Constants.branch == "cn" then
		ReportManager.RequestReportPanel(10195);
	end
end

-- 培养一次按钮
function OnPeiyangButtonClick(gameObject)
    error("OnPeiyangButtonClick");
    RequestPeiyang(1);
	--角色-人物进阶1次上报
	if Constants.branch == "cn" then
		ReportManager.RequestReportPanel(10196);
	end
end

function RequestPeiyang(count)
    local cultivateLevel = G_UserInfo.RoleAttribute.CultivateLv;
    error("cultivateLevel="..cultivateLevel);
    local cultivateSubLevel = G_UserInfo.RoleAttribute.CultivateSubLv;
    local cultivateInfo = m_CultivateInfos[cultivateLevel];
    if cultivateInfo == nil then
        error("cultivateInfo == nil");
        return;
    end
    
    if cultivateSubLevel == MAX_LEVEL then
        --ShowSystemFlowTips(3720);
        --G_MusicMng:OnLoadMusic(4011);
        error("培养等级已达最高, 需要激活操作");
        return;
    end

    local playerLevel = G_UserInfo.RoleAttribute.Level;
    if playerLevel < cultivateInfo.QualityNeedLv then
        local paraTable = { };
        table.insert(paraTable, cultivateInfo.QualityNeedLv)
        --[无法进阶，需要角色达到{0} 级[-]]
        ShowSystemFlowTips(3721, nil, paraTable);
        G_MusicMng:OnLoadMusic(4011);
        error("cultivateInfo == nil");
        return;
    end

    local ExID = cultivateInfo.ProveItem;
    local needItemNum = cultivateInfo.ProveItemNum;
    local hasItemNum = G_BagMng:GetExcelItemNum(ENUM_UI_PANEL.UI_PANEL_ITEM_ITEM, ExID);
    if hasItemNum >= needItemNum then
        InitPlayerModel();
        local buffer = ByteBuffer.New();
        buffer:WriteUShort(GMI_CTOS_LGS_CULTIVATE_PENGYANG);
        buffer:WriteByte(count);
        G_NetWorkMng:SendMessage(buffer);
        G_MusicMng:OnLoadMusic(4010);
    else
        G_MusicMng:OnLoadMusic(4011);
        ShowSystemFlowTips(ENUM_SYS_FLOWTIPS_EVENT.ENUM_EVENT_SPRITESTONELACK);
    end
    error("发送进阶角色按钮点击");
end

--------------------------外部调用的(或内部)更新此界面信息的方法----------------------
-- 更新玩家修为等级
function OnUpDateCultivateLevel(level)
    G_UserInfo.RoleAttribute.CultivateLv = level;
    G_UserInfo.RoleAttribute.CultivateSubLv = 0;
    RedHintMng.SetRedHintState(CREDHINTENUM.CULTIVATE, CultivateChangePanel.IsCanCultivateLevelUp());
    if IsOpenPanel(ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL) == 1 then
        InitPlayerInfo();
        if wingUse then
            if m_WingList ~= nil then
                m_WingList:Refresh();
                InitEquipButtonState();
            end
        end
    end
end

-- 红点检测当前主角是否可以进阶
function IsCanCultivateLevelUp(onlyCultivateLv)
    if G_UserInfo:GetCurPlayer() == nil then
        return false;
    end
    local PlayerProID = G_UserInfo.RoleAttribute.ProID;
    local playerLevel = G_UserInfo.RoleAttribute.Level;
    local playerRoleDate = CCommonTool.GetRoleDateInfo(PlayerProID);
    if playerRoleDate == nil then
        return;
    end
    local PlayerCultivateID = playerRoleDate.CultivateId + G_UserInfo.RoleAttribute.CultivateLv - 1;
    local cultivateInfo = CCommonTool.GetRoleCultivateInfo(PlayerCultivateID);
    if cultivateInfo == nil then
        return;
    end

    if cultivateInfo.attribute_lv == MAX_LEVEL then
        return false;
    end
    
    local subLevel = G_UserInfo.RoleAttribute.CultivateSubLv;
    if onlyCultivateLv == true and subLevel < MAX_SUBLEVEL then
        return false;
    end
    
    if not onlyCultivateLv  then
        if subLevel < MAX_SUBLEVEL then
            local ExID = cultivateInfo.ProveItem;
            local needItemNum = cultivateInfo.ProveItemNum;
            local hasItemNum = G_BagMng:GetExcelItemNum(ENUM_UI_PANEL.UI_PANEL_ITEM_ITEM, ExID);
            if hasItemNum >= needItemNum then
                return true;
            else
                return false;
            end
        end
    end

    local ExID = cultivateInfo.QualityNeedItem;
    local PlayerCurrentItemNum = G_BagMng:GetExcelItemNum(ENUM_UI_PANEL.UI_PANEL_ITEM_ITEM, ExID);
    local PlayerCurrentNeedItemNum = cultivateInfo.QualityItemNum;
    if playerLevel >= cultivateInfo.QualityNeedLv then
        if PlayerCurrentItemNum >= PlayerCurrentNeedItemNum then
            return true;
        end
    end
    return false;
end

-- 玩家进阶等级是否已达最高进阶等级
function IsMaxCultivateLevel()
    if G_UserInfo:GetCurPlayer() == nil then
        return false;
    end
    local PlayerProID = G_UserInfo.RoleAttribute.ProID;
    local playerLevel = G_UserInfo.RoleAttribute.Level;
    local playerRoleDate = CCommonTool.GetRoleDateInfo(PlayerProID);
    if playerRoleDate ~= nil then
        local PlayerCultivateID = playerRoleDate.CultivateId + G_UserInfo.RoleAttribute.CultivateLv - 1;
        local cultivateInfo = CCommonTool.GetRoleCultivateInfo(PlayerCultivateID);
        if cultivateInfo ~= nil then
            if cultivateInfo.attribute_lv == MAX_LEVEL then
                return true;
            end
        end
    end
    return false;
end

-- 修为培养返回
function OnCultivatePeiyangReturn(level, subLevel)
    if IsOpenPanel(ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL) == 1 then
        InitPlayerInfo();
    end
end

function UpdateFashion(fashionType)
    if fashionType == FASHION_WING_TYPE and wingUse then
        if IsOpenPanel(ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL) == 1 then
            if m_PlayerChangeEquip ~= nil then
                local fashionWingId = G_UserInfo.RoleAttribute.FashionWingId;
                if fashionWingId > 0 then
                    local fashionInfo = CCommonTool.GetFashion(fashionWingId);
                    if fashionInfo ~= nil then
                        local modelId = fashionInfo.ModelresId;
                        m_PlayerChangeEquip:SetUIFashion(FASHION_WING_TYPE, modelId, true);
                    end
                else
                    m_PlayerChangeEquip:SetUIFashion(FASHION_WING_TYPE, 0, true);
                end
                
            end
        end
    end
end

function RefreshWingList()
    if IsOpenPanel(ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL) == 1 and wingUse then
        if m_WingList ~= nil then
            m_WingList:Refresh();
            InitEquipButtonState();
        end
    end
end

function OnPlayerPropUpdate()
    if IsOpenPanel(ENUMPANELID.ENUM_PANEL_CULTIVATECHANGEPANEL) == 1 then
        InitPlayerInfo();
    end
end