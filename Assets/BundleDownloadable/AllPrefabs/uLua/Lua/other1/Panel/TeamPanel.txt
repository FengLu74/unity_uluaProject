require "Panel.MyTeamPanel";
require "Panel.TeamNearbyPanel";
require "Panel.TeamHallPanel";

module('TeamPanel', package.seeall)
-- 当前所在面板名字
local m_PanelName = 'TeamPanel';
---------------------------------------label路径---------------------------------------

-----------------------------------------按钮路径--------------------------------------
-- 关闭按钮
local m_CloseButtonPath = "CloseButton";

-----------------------------------------Sprite路径------------------------------------

----------------------------------gameobject所在的路径---------------------------------
-- 遮罩
local m_MaskPath = "Mask";
-- 组队大厅
local m_MenuItem1Path = "Menu/Grid/MenuItem1";
-- 附近队伍
local m_MenuItem2Path = "Menu/Grid/MenuItem2";
-- 我的队伍
local m_MenuItem3Path = "Menu/Grid/MenuItem3";

----------------------------------通用的名称路径---------------------------------------
-- 组队大厅面板
local m_TeamHallPanelPath = "TeamHallPanel";
-- 附近队伍面板
local m_TeamNearbyPanelPath = "TeamNearbyPanel";
-- 我的队伍面板
local m_MyTeamPanelPath = "MyTeamPanel";

-----------------------------------引用的对象------------------------------------------
-- 面板对象
local m_PanelObject = nil;
-- 是否创建成功
local m_CreateSuccess = false;
-- 组队大厅
local m_MenuItem1 = nil;
-- 附近队伍
local m_MenuItem2 = nil;
-- 我的队伍
local m_MenuItem3 = nil;
-- 组队大厅面板
local m_TeamHallPanel = nil;
-- 附近队伍面板
local m_TeamNearbyPanel = nil;
-- 我的队伍面板
local m_MyTeamPanel = nil;

-- 选中的标签
local m_selectTagNum = 1;
-- 上一次选择标签
local m_lastSelectTagNum = 1;

-----------------------------------一些写死的规定--------------------------------------

-- toggles组成的table内容
local m_toggleTable = {
    [1] = { name = m_MenuItem1Path, panelName = m_TeamHallPanelPath, isFirstOpen = true, luaFileName = TeamHallPanel },
    [2] = { name = m_MenuItem2Path, panelName = m_TeamNearbyPanelPath, isFirstOpen = true, luaFileName = TeamNearbyPanel },
    [3] = { name = m_MenuItem3Path, panelName = m_MyTeamPanelPath, isFirstOpen = true, luaFileName = MyTeamPanel }
};

------------------------------------BaseLua调用的同名方法------------------------------
-- 初始化的内容放在start方法中
function Start()
    InitObjects();
    InitEvents();
    InitShow();
    m_CreateSuccess = true;
end

function OnEnable()
    if m_CreateSuccess then
        InitShow();
    end
end

function OnDisable()
    m_toggleTable[m_selectTagNum].luaFileName.OnDisable();
end

function OnDestroy()
    for Index = 1, #m_toggleTable do
        if m_toggleTable[Index].luaFileName ~= nil then
            m_toggleTable[Index].luaFileName.OnDestroy();
            m_toggleTable[Index].isFirstOpen = true;
        end
    end
    m_selectTagNum = 1;
    m_lastSelectTagNum = 1;
    m_PanelObject = nil;
    m_CreateSuccess = false;
    m_MenuItem1 = nil;
    m_MenuItem2 = nil;
    m_MenuItem3 = nil;
    m_TeamHallPanel = nil;
    m_TeamNearbyPanel = nil;
    m_MyTeamPanel = nil;

end
-----------------------------------本lua文件自调用方法--------------------------------
-- 初始化obj
function InitObjects()
    m_PanelObject = FindPanelObjWithPanelID(ENUMPANELID.ENUM_PANEL_TEAMPANEL);
    m_MenuItem1 = child(m_PanelObject, m_MenuItem1Path).gameObject;
    m_MenuItem2 = child(m_PanelObject, m_MenuItem2Path).gameObject;
    m_MenuItem3 = child(m_PanelObject, m_MenuItem3Path).gameObject;
    m_TeamHallPanel = child(m_PanelObject, m_TeamHallPanelPath).gameObject;
    m_TeamNearbyPanel = child(m_PanelObject, m_TeamNearbyPanelPath).gameObject;
    m_MyTeamPanel = child(m_PanelObject, m_MyTeamPanelPath).gameObject;
    m_TeamHallPanel:SetActive(false);
    m_TeamNearbyPanel:SetActive(false);
    m_MyTeamPanel:SetActive(false);

    SetGameObjectState(m_MenuItem1Path .. "/Background", true, m_PanelObject);
    SetGameObjectState(m_MenuItem1Path .. "/Toggle", false, m_PanelObject);
    SetGameObjectState(m_MenuItem2Path .. "/Background", true, m_PanelObject);
    SetGameObjectState(m_MenuItem2Path .. "/Toggle", false, m_PanelObject);
    SetGameObjectState(m_MenuItem3Path .. "/Background", true, m_PanelObject);
    SetGameObjectState(m_MenuItem3Path .. "/Toggle", false, m_PanelObject);
end

-- 初始化对象事件
function InitEvents()
    SetGameObjectEvent(m_MaskPath, OnMaskClick, m_PanelObject);
    SetGameObjectEvent(m_CloseButtonPath, OnCloseClick, m_PanelObject);
    UIEventListener.Get(m_MenuItem1).onClick = LuaHelper.OnClick(OnMenuItem1Click);
    UIEventListener.Get(m_MenuItem2).onClick = LuaHelper.OnClick(OnMenuItem2Click);
    UIEventListener.Get(m_MenuItem3).onClick = LuaHelper.OnClick(OnMenuItem3Click);

end

-- 初始化显示信息
function InitShow()
    OpenPanelByTag();
end

-- 通过tag的次序开启内容以及执行lua逻辑
function OpenPanelByTag()
    SetGameObjectState(m_toggleTable[m_lastSelectTagNum].name .. "/Background", true, m_PanelObject);
    SetGameObjectState(m_toggleTable[m_lastSelectTagNum].name .. "/Toggle", false, m_PanelObject);
    SetGameObjectState(m_toggleTable[m_lastSelectTagNum].panelName, false, m_PanelObject);
    m_toggleTable[m_lastSelectTagNum].luaFileName.OnDisable();

    SetGameObjectState(m_toggleTable[m_selectTagNum].name .. "/Toggle", true, m_PanelObject);
    SetGameObjectState(m_toggleTable[m_selectTagNum].name .. "/Background", false, m_PanelObject);
    SetGameObjectState(m_toggleTable[m_selectTagNum].panelName, true, m_PanelObject);
    m_toggleTable[m_selectTagNum].luaFileName.OnEnable();
    if m_toggleTable[m_selectTagNum].isFirstOpen == true then
        m_toggleTable[m_selectTagNum].isFirstOpen = false;
        m_toggleTable[m_selectTagNum].luaFileName.Start();
    end
end

------------------------------------------事件方法------------------------------------

-- 遮罩点击事件
function OnMaskClick(gameObject)
    closePanel(ENUMPANELID.ENUM_PANEL_TEAMPANEL);
end

-- 组队大厅标签点击事件
function OnMenuItem1Click(gameObject)
    OnTabClick(1);
end

-- 附近队伍标签点击事件
function OnMenuItem2Click(gameObject)
    OnTabClick(2);
end

-- 我的队伍标签点击事件
function OnMenuItem3Click(gameObject)
    OnTabClick(3);
end

function OnTabClick(index)
    if m_selectTagNum ~= index then
        m_lastSelectTagNum = m_selectTagNum;
        m_selectTagNum = index;
        OpenPanelByTag();
    end
end

-- 关闭界面事件
function OnCloseClick(gameObject)
    closePanel(ENUMPANELID.ENUM_PANEL_TEAMPANEL);
end

--------------------------外部调用的(或内部)更新此界面信息的方法----------------------

-- 打开此界面并且通过参数来打开第几个标签页的内容
function OpenThisPanelByTag(index, causePanelId)
    if m_CreateSuccess == false then
        m_selectTagNum = index;
        m_lastSelectTagNum = index;
        createPanel(ENUMPANELID.ENUM_PANEL_TEAMPANEL, causePanelId);
    else
        createPanel(ENUMPANELID.ENUM_PANEL_TEAMPANEL, causePanelId);
        if m_selectTagNum ~= index then
            m_lastSelectTagNum = m_selectTagNum;
            m_selectTagNum = index;
            OpenPanelByTag();
        end
    end
end


-- 跳转界面获取数据
function GetJumpCloseData()
    local panelParams = { };
    local tabIndex = m_selectTagNum;
    panelParams.tabIndex = tabIndex;
    if tabIndex == 1 then
        -- 组队大厅
        panelParams.data = TeamHallPanel.GetJumpCloseData();
    elseif tabIndex == 2 then
        -- 附近队伍
        panelParams.data = TeamNearbyPanel.GetJumpCloseData();
    elseif tabIndex == 3 then
        -- 我的队伍
        panelParams.data = MyTeamPanel.GetJumpCloseData();
    end
    return panelParams;
end

-- 跳转界面设置数据
function SetJumpCloseData(paramTable)
    if paramTable == nil then
        return;
    end
    local panelParams = paramTable;
    local tabIndex = panelParams.tabIndex;
    if tabIndex == 1 then
        -- 组队大厅
        TeamHallPanel.SetJumpCloseData(panelParams.data);
    elseif tabIndex == 2 then
        -- 附近队伍
        TeamNearbyPanel.SetJumpCloseData(panelParams.data);
    elseif tabIndex == 3 then
        -- 我的队伍
        MyTeamPanel.SetJumpCloseData(panelParams.data);
    end
    OpenThisPanelByTag(panelParams.tabIndex);
end

-- 通过副本打开队伍界面, 自动选择目标
function OpenByDungeonId(id, causePanelId)
    local hasTeam = TeamManager.HasTeam();
    if id == nil or id == 0 then
        if hasTeam == true then
            OpenThisPanelByTag(3, causePanelId)
        else
            OpenThisPanelByTag(1, causePanelId)
        end
    else
        local goalInfo, diffIndex = TeamManager.GetTeamGoalInfoByDungeonId(id);
        OpenByGoalInfo(goalInfo, diffIndex);
    end
end

-- 通过副本打开队伍界面, 自动选择目标
function OpenByActivityId(id, causePanelId)
    local hasTeam = TeamManager.HasTeam();
    if id == nil or id == 0 then
        if hasTeam == true then
            OpenThisPanelByTag(3, causePanelId)
        else
            OpenThisPanelByTag(1, causePanelId)
        end
    else
        local goalInfo, diffIndex = TeamManager.GetTeamGoalInfoByActivityId(id);
        OpenByGoalInfo(goalInfo, diffIndex);
    end
end

function OpenByGoalInfo(goalInfo, diffIndex)
    error("OpenByGoalInfo::");
    local hasTeam = TeamManager.HasTeam();
    if hasTeam == true then
        local teamData = TeamManager.teamData;
        OpenThisPanelByTag(3, causePanelId)
        if goalInfo ~= nil and (teamData.goalId ~= goalInfo.Id or teamData.diffIndex ~= diffIndex) then
            TeamProtocol.RequestSetTeamGoal(goalInfo.Id, diffIndex);
        end
        -- 组队大厅的目标与我的队伍的目标设置一致
        local goalData = TeamManager.teamHallGoalData;
        if goalInfo ~= nil then
            goalData.goalId = goalInfo.Id;
            goalData.diffIndex = diffIndex;
        end
    else
        local goalData = TeamManager.teamHallGoalData;
        if goalInfo ~= nil then
            goalData.goalId = goalInfo.Id;
            goalData.diffIndex = diffIndex;
        end
        OpenThisPanelByTag(1, causePanelId)
    end
end

-- 服务器通知刷新组队大厅的队伍
function OnRefreshTean()
    if IsObjectActive(m_TeamHallPanel) == true then 
        TeamHallPanel.RequestTeamList(0);
    elseif IsObjectActive(m_TeamNearbyPanel) == true then
        TeamNearbyPanel.OnRefreshButtonClick();
    end
end