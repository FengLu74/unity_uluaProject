module('ActivityPanel', package.seeall)

require "Panel.ActivityDailyPanel";
require "Panel.ActivityGuildPanel";
require "Panel.ActivityBossPanel";
require "Panel.ActivityLivenessPanel";
require "Panel.ActivityGuildWarPanel";
require "Panel.ActivityHonorPanel";

-- 当前所在面板名字
local m_PanelName = 'ActivityPanel';
---------------------------------------label路径---------------------------------------

-----------------------------------------按钮路径--------------------------------------
-- 周历按钮
local m_WeekButtonPath = "WeekButton";

-----------------------------------------Sprite路径------------------------------------

----------------------------------gameobject所在的路径---------------------------------
-- 日常活动标签
local m_MenuItem1Path = "Menu/Grid/MenuItem1";
-- 帮派活动标签
local m_MenuItem2Path = "Menu/Grid/MenuItem2";
-- 世界BOSS标签
local m_MenuItem3Path = "Menu/Grid/MenuItem3";
-- 公会领地战标签
local m_MenuItem4Path = "Menu/Grid/MenuItem4";
-- 阵营日常标签
local m_MenuItem5Path = "Menu/Grid/MenuItem5";
-- 骑士荣誉标签
local m_MenuItem6Path = "Menu/Grid/MenuItem6";
----------------------------------通用的名称路径---------------------------------------
-- 活跃度面板
local m_ActivityLivenessPanelPath = "ActivityLivenessPanel";
-- 日常活动面板
local m_ActivityDailyPanelPath = "ActivityDailyPanel";
-- 帮派活动面板
local m_ActivityGuildPanelPath = "ActivityGuildPanel";
-- 阵营活动面板
local m_ActivityCampPanelPath = "ActivityCampPanel";
-- 世界BOSS面板
local m_ActivityBossPanelPath = "ActivityBossPanel";
-- 公会战面板
local m_ActivityGuildWarPanelPath = "ActivityGuildWarPanel";
-- 骑士荣耀面板
local m_ActivityHonorPanelPath = "ActivityHonorPanel";
-----------------------------------引用的对象------------------------------------------
-- 面板对象
local m_PanelObject = nil;
-- 是否创建成功
local m_CreateSuccess = false;
-- 日常活动标签
local m_MenuItem1 = nil;
-- 帮派活动标签
local m_MenuItem2 = nil;
-- 世界BOSS标签
local m_MenuItem3 = nil;
-- 公会战标签
local m_MenuItem4 = nil;
-- 阵营日常标签
local m_MenuItem5 = nil;
-- 骑士荣誉标签
local m_MenuItem6 = nil;
-- 活跃度面板
local m_ActivityLivenessPanel = nil;
-- 日常活动面板
local m_ActivityDailyPanel = nil;
-- 帮派活动面板
local m_ActivityGuildPanel = nil;
-- 阵营日常面板
local m_ActivityCampPanel = nil;
-- 世界BOSS面板
local m_ActivityBossPanel = nil;
-- 骑士荣耀面板 
local m_ActivityHonorPanel = nil;
-- 选中的标签
local m_selectTagNum = 1;
-- 上一次选择标签
local m_lastSelectTagNum = 1;
-----------------------------------一些写死的规定--------------------------------------

-- toggles组成的table内容
local m_toggleTable = {
    [1] = { name = m_MenuItem1Path, panelName = m_ActivityDailyPanelPath, isFirstOpen = true, luaFileName = ActivityDailyPanel },
    [2] = { name = m_MenuItem2Path, panelName = m_ActivityGuildPanelPath, isFirstOpen = true, luaFileName = ActivityGuildPanel },
    [3] = { name = m_MenuItem3Path, panelName = m_ActivityBossPanelPath, isFirstOpen = true, luaFileName = ActivityBossPanel },
    [4] = { name = m_MenuItem4Path, panelName = m_ActivityGuildWarPanelPath, isFirstOpen = true, luaFileName = ActivityGuildWarPanel },
    [5] = { name = m_MenuItem5Path, panelName = m_ActivityCampPanelPath, isFirstOpen = true, luaFileName = ActivityCampPanel },
    [6] = { name = m_MenuItem6Path, panelName = m_ActivityHonorPanelPath, isFirstOpen = true, luaFileName = ActivityHonorPanel },
};

------------------------------------BaseLua调用的同名方法------------------------------
-- 初始化的内容放在start方法中
function Start()
    InitObjects();
    InitEvents();
    InitShow();
    ActivityLivenessPanel.Start();
    ActivityProtocol.RequestActivitysLimitTime();
    m_CreateSuccess = true;
end

function OnEnable()
    if m_CreateSuccess then
        InitShow();
        ActivityProtocol.RequestActivitysLimitTime();
    end
    ActivityLivenessPanel.OnEnable();
end

function OnDisable()
    m_toggleTable[m_selectTagNum].luaFileName.OnDisable();
    ActivityLivenessPanel.OnDisable();
    m_lastSelectTagNum = m_selectTagNum;
    m_selectTagNum = 1;
    ActivityManager.ClearLimitTime();
end

function OnDestroy()
    for Index = 1, #m_toggleTable do
        if m_toggleTable[Index].luaFileName ~= nil then
            m_toggleTable[Index].luaFileName.OnDestroy();
            m_toggleTable[Index].isFirstOpen = true;
        end
    end
    m_selectTagNum = 1;
    m_lastSelectTagNum = 1;
    m_PanelObject = nil;
    m_CreateSuccess = false;
    m_MenuItem1 = nil;
    m_MenuItem2 = nil;
    m_MenuItem3 = nil;
    m_MenuItem4 = nil;
    m_MenuItem5 = nil;
    m_MenuItem6 = nil;
    m_ActivityLivenessPanel = nil;
    m_ActivityDailyPanel = nil;
    m_ActivityGuildPanel = nil;
    m_ActivityBossPanel = nil;
    ActivityLivenessPanel.OnDestroy();
end
-----------------------------------本lua文件自调用方法--------------------------------
-- 初始化obj
function InitObjects()
    m_PanelObject = FindPanelObjWithPanelID(ENUMPANELID.ENUM_PANEL_ACTIVITYPANEL);
    m_MenuItem1 = child(m_PanelObject, m_MenuItem1Path).gameObject;
    m_MenuItem2 = child(m_PanelObject, m_MenuItem2Path).gameObject;
    m_MenuItem3 = child(m_PanelObject, m_MenuItem3Path).gameObject;
    m_MenuItem4 = child(m_PanelObject, m_MenuItem4Path).gameObject;
    m_MenuItem5 = child(m_PanelObject, m_MenuItem5Path).gameObject;
    m_MenuItem6 = child(m_PanelObject, m_MenuItem6Path).gameObject;
    m_ActivityLivenessPanel = child(m_PanelObject, m_ActivityLivenessPanelPath).gameObject;
    m_ActivityDailyPanel = child(m_PanelObject, m_ActivityDailyPanelPath).gameObject;
    m_ActivityGuildPanel = child(m_PanelObject, m_ActivityGuildPanelPath).gameObject;
    m_ActivityCampPanel = child(m_PanelObject, m_ActivityCampPanelPath).gameObject;
    m_ActivityBossPanel = child(m_PanelObject, m_ActivityBossPanelPath).gameObject;
    m_ActivityLivenessPanel:SetActive(false);
    m_ActivityDailyPanel:SetActive(false);
    m_ActivityGuildPanel:SetActive(false);
    m_ActivityCampPanel:SetActive(false);
    m_ActivityBossPanel:SetActive(false);

end

-- 初始化对象事件
function InitEvents()
    UIEventListener.Get(m_MenuItem1).onClick = LuaHelper.OnClick(OnMenuItem1Click);
    UIEventListener.Get(m_MenuItem2).onClick = LuaHelper.OnClick(OnMenuItem2Click);
    UIEventListener.Get(m_MenuItem3).onClick = LuaHelper.OnClick(OnMenuItem3Click);
    UIEventListener.Get(m_MenuItem4).onClick = LuaHelper.OnClick(OnMenuItem4Click);
    UIEventListener.Get(m_MenuItem5).onClick = LuaHelper.OnClick(OnMenuItem5Click);
    UIEventListener.Get(m_MenuItem6).onClick = LuaHelper.OnClick(OnMenuItem6Click);
    SetGameObjectEvent(m_WeekButtonPath, OnWeekButtonClick, m_PanelObject);

end

-- 初始化显示信息
function InitShow()
    OpenPanelByTag();

    -- 骑士荣誉开启等级
    local honorOpenLevel = CCommonTool.GetDefineInfo(EDefineContentID.TYPE_LEVEL_ACTIVITYHONIR):GetIntContent();
    -- 判断角色等级是否可以开启骑士荣誉页签
    if G_UserInfo.RoleAttribute.Level >= honorOpenLevel then
        --m_MenuItem6:SetActive(true);
		m_MenuItem6:SetActive(false);
    else
        m_MenuItem6:SetActive(false);
    end
end

-- 通过tag的次序开启内容以及执行lua逻辑
function OpenPanelByTag()
    SetGameObjectState(m_toggleTable[m_lastSelectTagNum].name .. "/Toggle", false, m_PanelObject);
    SetGameObjectState(m_toggleTable[m_lastSelectTagNum].panelName, false, m_PanelObject);
    m_toggleTable[m_lastSelectTagNum].luaFileName.OnDisable();
    SetGameObjectState(m_toggleTable[m_selectTagNum].name .. "/Toggle", true, m_PanelObject);
    SetGameObjectState(m_toggleTable[m_selectTagNum].panelName, true, m_PanelObject);
    m_toggleTable[m_selectTagNum].luaFileName.OnEnable();
    if m_toggleTable[m_selectTagNum].isFirstOpen == true then
        m_toggleTable[m_selectTagNum].isFirstOpen = false;
        m_toggleTable[m_selectTagNum].luaFileName.Start();
    end
    local livenessVisible = m_selectTagNum ~= 3 and m_selectTagNum ~= 4 and m_selectTagNum ~= 6;
    if m_ActivityLivenessPanel.activeSelf ~= livenessVisible then
        m_ActivityLivenessPanel:SetActive(livenessVisible);
        if livenessVisible then
            ActivityLivenessPanel.OnEnable();
        else
            ActivityLivenessPanel.OnDisable();
        end
    end
end

------------------------------------------事件方法------------------------------------

-- 日常活动面板
function OnMenuItem1Click(gameObject)
    OnTabClick(1);
end

-- 帮派活动面板
function OnMenuItem2Click(gameObject)
    OnTabClick(2);
end

-- 世界BOSS面板
function OnMenuItem3Click(gameObject)
    OnTabClick(3);
end

-- 阵营日常面板
function OnMenuItem5Click(gameObject)
    OnTabClick(5);
end

-- 公会战面板
function OnMenuItem4Click(gameObject)
    GuildProtocol.RequestStrongHold();
end

-- 骑士荣誉面板
function OnMenuItem6Click(gameObject)
    OnTabClick(6);
    -- 请求骑士荣誉信息
    ActivityProtocol.RequestHonorData();
end

function OnTabClick(index)
    if m_selectTagNum ~= index then
        m_lastSelectTagNum = m_selectTagNum;
        m_selectTagNum = index;
        OpenPanelByTag();
    end
end

-- 周历按钮点击事件
function OnWeekButtonClick(gameObject)
    createPanel(ENUMPANELID.ENUM_PANAEL_ACTIVITYCALENDERPANEL, ENUMPANELID.ENUM_PANEL_ACTIVITYPANEL);
end

-- 关闭界面事件
function OnCloseClick()
    if ActivityLivenessPanel.m_RewardsContentIsOpen then
        ActivityLivenessPanel.OnRewardMaskClick();
        return;
    end
    closePanel(ENUMPANELID.ENUM_PANEL_ACTIVITYPANEL);
end

--------------------------外部调用的(或内部)更新此界面信息的方法----------------------

-- 打开此界面并且通过参数来打开第几个标签页的内容
function OpenThisPanelByTag(index, causePanelId)
    if m_CreateSuccess == false then
        m_selectTagNum = index;
        m_lastSelectTagNum = index;
        createPanel(ENUMPANELID.ENUM_PANEL_ACTIVITYPANEL, causePanelId);
    else
        createPanel(ENUMPANELID.ENUM_PANEL_ACTIVITYPANEL, causePanelId);
        if m_selectTagNum ~= index then
            m_lastSelectTagNum = m_selectTagNum;
            m_selectTagNum = index;
            OpenPanelByTag();
        end
    end
end

-- 跳转界面获取数据
function GetJumpCloseData()
    local panelParams = { };
    local tabIndex = m_selectTagNum;
    panelParams.tabIndex = tabIndex;
    return panelParams;
end

-- 跳转界面设置数据
function SetJumpCloseData(paramTable)
    if paramTable == nil then
        return;
    end
    local panelParams = paramTable;
    local tabIndex = panelParams.tabIndex;
    OpenThisPanelByTag(tabIndex);
end

-- 刷新领地战页面
function RefreshGuildWar()
    if IsOpenPanel(ENUMPANELID.ENUM_PANEL_ACTIVITYPANEL) and m_selectTagNum == 4 then
        OpenPanelByTag();
    end
end